#ifndef WILE_RTL2_H_2569976297095881579
#define WILE_RTL2_H_2569976297095881579

lval wile_list_reverse(lptr*, lptr);	// (list-reverse lst)
lval wile_list_length(lptr*, lptr);	// (list-length lst)
lval wile_list_length_eq(lptr*, lptr);	// (list-length=? n lst)
lval wile_list_length_ge(lptr*, lptr);	// (list-length>=? n lst)
lval wile_list_length_gt(lptr*, lptr);	// (list-length>? n lst)
lval wile_list_length_lt(lptr*, lptr);	// (list-length<? n lst)
lval wile_list_length_le(lptr*, lptr);	// (list-length<=? n lst)
lval wile_list_last(lptr*, lptr);	// (list-last lst)
lval wile_list_append(lptr*, lptr);	// (list-append . lsts)
lval wile_list_flatten(lptr*, lptr);	// (list-flatten lst)
lval wile_list_head(lptr*, lptr);	// (list-head lst n)
lval wile_list_tail(lptr*, lptr);	// (list-tail lst n)
lval wile_list_unhead(lptr*, lptr);	// (list-unhead lst n)
lval wile_list_untail(lptr*, lptr);	// (list-untail lst n)
lval wile_list_ref(lptr*, lptr);	// (list-ref lst n)
lval wile_list_filter(lptr*, lptr);	// (list-filter pred lst)
lval wile_list_partition(lptr*, lptr);	// (list-partition pred lst)
lval wile_list2vector(lptr*, lptr);	// (list->vector lst)
lval wile_list2bytevector(lptr*, lptr);	// (list->bytevector lst)
lval wile_string2list(lptr*, lptr);	// (string->list str)
lval wile_vector2list(lptr*, lptr);	// (vector->list vec)
lval wile_string_append(lptr*, lptr);	// (string-append . strs)
lval wile_foldr(lptr*, lptr);	// (foldr func end lst)
lval wile_foldl(lptr*, lptr);	// (foldl func accum lst)
lval wile_expmod(lptr*, lptr);	// (expmod a n m)
lval wile_string_join_by(lptr*, lptr);	// (string-join-by join . strs)
lval wile_string_split_by(lptr*, lptr);	// (string-split-by drop? str)
lval wile_string_split_by_whitespace(lptr*, lptr);	// (string-split-by-whitespace str)
lval wile_map1(lptr*, lptr);	// (map1 proc lst)
lval wile_foldl1(lptr*, lptr);	// (foldl1 proc lst)
lval wile_map(lptr*, lptr);	// (map proc lst . lsts)
lval wile_for_each(lptr*, lptr);	// (for-each proc lst . lsts)
lval wile_add(lptr*, lptr);	// (+ . vs)
lval wile_multiply(lptr*, lptr);	// (* . vs)
lval wile_subtract(lptr*, lptr);	// (- . vs)
lval wile_divide(lptr*, lptr);	// (/ . vs)
lval wile_min(lptr*, lptr);	// (min . vs)
lval wile_max(lptr*, lptr);	// (max . vs)
lval wile_list_sort(lptr*, lptr);	// (list-sort is-lt? lst)
lval wile_replicate(lptr*, lptr);	// (replicate c n)
lval wile_memp(lptr*, lptr);	// (memp test? lst)
lval wile_memv(lptr*, lptr);	// (memv obj lst)
lval wile_assp(lptr*, lptr);	// (assp test? lst)
lval wile_assv(lptr*, lptr);	// (assv obj lst)
lval wile_list_drop_while(lptr*, lptr);	// (list-drop-while drop? lst)
lval wile_list_take_while(lptr*, lptr);	// (list-take-while keep? lst)
lval wile_list_remove_dups(lptr*, lptr);	// (list-remove-dups lst)
lval wile_string_pad_left(lptr*, lptr);	// (string-pad-left str pch lmin)
lval wile_string_pad_right(lptr*, lptr);	// (string-pad-right str pch lmin)
lval wile_string_pad_center(lptr*, lptr);	// (string-pad-center str pch lmin)
lval wile_string_trim_left(lptr*, lptr);	// (string-trim-left drop? str)
lval wile_string_trim_right(lptr*, lptr);	// (string-trim-right drop? str)
lval wile_string_trim(lptr*, lptr);	// (string-trim drop? str)
lval wile_fromto(lptr*, lptr);	// (fromto f l)
lval wile_upfrom(lptr*, lptr);	// (upfrom s n0)
lval wile_any_true(lptr*, lptr);	// (any-true? vals)
lval wile_all_true(lptr*, lptr);	// (all-true? vals)
lval wile_write_string(lptr*, lptr);	// (write-string . strs)
lval wile_sql_meta_tables(lptr*, lptr);	// (sqlite-meta-tables port)
lval wile_sql_meta_schema(lptr*, lptr);	// (sqlite-meta-schema port tbl)
lval wile_sql_dump_table(lptr*, lptr);	// (sqlite-dump-table sport tbl oport)
lval wile_julian_day(lptr*, lptr);	// (julian-day year month day)
lval wile_gregorian_date(lptr*, lptr);	// (gregorian-date jday)
lval wile_offset_date(lptr*, lptr);	// (offset-date year month day offset)
lval wile_delta_dates(lptr*, lptr);	// (delta-dates y1 m1 d1 y2 m2 d2)
lval wile_day_of_week(lptr*, lptr);	// (day-of-week v . vs)
lval wile_is_leap_year(lptr*, lptr);	// (is-leap-year? y)
lval wile_day_of_year(lptr*, lptr);	// (day-of-year y m d)
lval wile_julian_day_of_easter(lptr*, lptr);	// (julian-day-of-easter year)
lval wile_typeof(lptr*, lptr);	// (type-of v)
lval wile_printf(lptr*, lptr);	// (printf fstr . vals)
lval wile_fprintf(lptr*, lptr);	// (fprintf port fstr . vals)
lval wile_sprintf(lptr*, lptr);	// (sprintf fstr . vals)
lval wile_random_permutation(lptr*, lptr);	// (random-permutation n)
lval wile_vector_sort_inplace(lptr*, lptr);	// (vector-sort! is-le? vec)
lval wile_vector_map(lptr*, lptr);	// (vector-map proc vec . vecs)
lval wile_vector_map_inplace(lptr*, lptr);	// (vector-map! proc vec)
lval wile_vector_foreach(lptr*, lptr);	// (vector-for-each proc vec . vecs)
lval wile_cholesky_decompose(lptr*, lptr);	// (cholesky-decompose mat)
lval wile_cholesky_solve(lptr*, lptr);	// (cholesky-solve mat vec)
lval wile_build_info(lptr*, lptr);	// (wile-build-info)
lval wile_display_stack_trace(lptr*, lptr);	// (display-stack-trace trace-data port)
lval wile_stack_trace(lptr*, lptr);	// (stack-trace port)
lval wile_std_env_no_macros(lptr*, lptr);	// (wile-standard-environment)
lval wile_env_add_macros(lptr*, lptr);	// (wile-environment-with-macros env)
lval wile_eval_define_form(lptr*, lptr);	// (define-form? expr)
lval wile_eval_define(lptr*, lptr);	// (eval-define macro env expr)
lval wile_eval_apply_lambda(lptr*, lptr);	// (apply-lambda fn args)
lval wile_eval_apply_interp(lptr*, lptr);	// (apply-interp fn . args)
lval wile_eval(lptr*, lptr);	// (eval env expr)

#endif // WILE_RTL2_H_2569976297095881579
