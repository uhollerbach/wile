Stuff TODO

* coverity flag: deal with uninitialized "origin" field in lots of places

  > dealt with; now deal with it better

* self-compilation

  > a bug: in read-recursive, there are several named-let functions:
    loop1 which contains loop2 which can in turn call loop1... the variable
    which contains the closure for loop1 and which is blithely used
    in generating a call to loop1 inside loop2 isn't visible inside loop2.
    it should be possible to make a much smaller test case that shows this
    >>> fixed I think - it works for one level of nesting; multi-level
        not tested yet

* start working on (eval) function -- see repl.scm

  > almost all special forms are there except 'delay' etc

* investigate difference in behavior among mit-scheme, (ha)skeem, repl,
  wile: mit-scheme, (ha)skeem and repl agree that the following is a
  quine (this is good):

    ((lambda (x) (display `(,x ',x))) '(lambda (x) (display `(,x ',x))))

  wile is slightly defective, it misses retaining one inner quote which
  then after one iteration causes the whole thing to collapse

* stack traces: working pretty well for starters - try getting better
  location info? not sure yet how, the backtrace and addr2line stuff
  knows only about c

* Add a profiler - start with a counter for each compiled function,
  incremented for every call (including tail calls).

* Naive version of queue fails: cons cells aren't "far enough" away from
  the cpu, so often/always, we modify a version on the stack with set-c[ad]r!
  and don't touch the "real" version. Needs set-c[ad]r! to be fixed

  > workaround is a different version of queues that internally provides
    a version of lists that use little vectors as cons cells -> this
    basically boxes the data that needs to go in the heap, and then
    it all works

* more tail-call optimization: want to do tail self-recursion, ie routine
  calls itself directly in a tail call, regardless of the pragma; it's a
  simple goto which should be safe in all cases, so want to do it. but
  the pragma flips a switch in the wrong place, the info isn't where it
  needs to be for this to work. needs some rearrangement.

  > clang has attribute musttail which is wrapped up in macro TAIL_CALL;
    however, now that the careful argument re-use is in place, gcc also
    seems to be able to compile the test cases into tail calls.

  > TCO seems to be working, except for (apply): even though that's
    marked as TAIL_CALL, it's still not doing it - perhaps because
    I'm allocating a new args vector, perhaps because it's in wile-rtl1.c
    which is inside the libwrtl library?

* continuations - section below

* possibly a bug in macro-expansion - nested macros as in namespace plus
  def-struct seem to be a bit wiggy: the def-struct stuff is not getting
  expanded? might need to add a full separate macro-expansion pass

* Implement more special forms: delay, force, fully general mixed version
  of case

  > test => syntax for (case)

* code cleanup optimizations -> get a proper intermediate instruction language

* change read-line primitive:

  > already took away 0-args version, that was not going to work anymore
  > add an optional second argument to tell whether or not to filter out
    the trailing CR/LF

* more primitives

  eq?
  bytevector-pack
  bytevector-unpack

  matrix-lu-decompose
  matrix-lu-solve
  sat2-solve

  special cases in the compiler:

  trace-function

  ;;; will not support right now
  vector-grow!		;;; stack vs heap complicates this
  dump-bindings		;;; it's not clear what the bindings are
  procedure->data	;;; this is "uncompile", not clear how to do that
  macro?		;;; at runtime, don't have macros anymore

* performance... hmmm. on vector-sort! test case, skeem is ~4x *faster*
  than wile's compiled code. that's not nice! ... same seems to be true
  for Collatz sequence proggie; serious performance regression here!

  > collatz: time goes down from >1h to ~5sec (!!!) when I replace the
    generic arithmetic ops by their 2-arg integer-specific versions,
    and from ~5sec to ~3sec when I replace write-string by write-1str.
    holy flaming cat turds! that's kinda horrible... but well localized!

  > and the same is true for vector-sort! test. inside vector-sort! and
    random-permutation, there are index calculations involving addition
    and subtraction of integers... replace generic + and - with i+ and i-,
    stuff gets zoomy. test case runs in <10sec vs >1min for skeem.

  > NEED TYPE CHECKER AND OPTIMIZER! (but how? that's hard work...)

  > maybe add 3- and 4-argument versions of at least i+ and i-? some
    of the date-manip code got really tangled with the need to do only
    2-argument i+ and i-

  > no, can't do that; the generic +-*/ routines wrap the specific
    ops, and can't do that if they are ambiguous. instead, add i++ and i--

+ bug? zero-length vector creation, ie (vector), doesn't work;
    it produces a vector of length 1. this is because in vector-create,
    it uses a minimum capa of 1. hmmm... fix this?

* scheme number tower: implement a bunch of little tiny fussy two-argument
  routines i+ i- i* i/ q+ ... c* c/ min/i max/i ... min/r max/r, then
  weave them together into user-facing routines

  > good progress, a bunch of pieces are in place already

  > generic multi-argument + - * / seem to be working; ditto min/max

################################################################

* continuations aka call/cc

  a number of different tests are working: mit-scheme, skeem, and wile
  all agree on what the answer should be. amazing!

  many many tests available from delimited continuations but need
  closures to work... and update: a significant number of those tests
  do indeed work; a number do not, most with "bad type" exception from
  apply. segfaults appear to be gone now.

  one test where skeem and wile agree, but generates an infinite loop,
  whereas mit-scheme just gives two outputs - but! my cargo-cult
  understanding of continuations seems to agree with skeem+wile! wut???

  > many thanks to Andrew Tropin for a very helpful comment that
    cleared this up. mit-scheme and racket have implicitly delimited
    continuations, and the limit can be varied depending on how it's
    compiled or interpreted. with the case where mit-scheme was giving
    just two outputs vs wile's infinite outputs, if I shift the limit
    by wrapping everything inside a (begin ...), then mit-scheme also
    generates the infinite loop that I expect - *whew!* my cargo-cult
    understanding isn't so cargo-cult after all
