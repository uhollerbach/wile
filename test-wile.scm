#!/home/uwe/tools/skeem
;;; -*- mode: scheme; -*-

;;; Test wile... trust but verify its exceptionally stable geniosity

;;; TODO: test the following:
;;;   unset-environment-variable
;;;   set-environment-variable
;;;   get-environment-variable
;;;   send-signal
;;;   run-write-command
;;;   angle alias phase
;;;   agm
;;;   apply - tested indirectly inside string-join-by
;;;   all the 3x and 4x cxr that are newly hardwired
;;;   random-normal-pair
;;;   lambert-W-, lambert-W for non-zero branches
;;; these are hard to test
;;;   exit
;;;   change-root-directory

;;; need this here because it's defined in wile-main.scm
;;; rather than wile-comp.scm

(define (is-colon? c) (char=? c #\:))
(define string-hash string-hash-64)

;;; serial numbers filed off and body lines changed from autotools build

(define global-config
  '((c-compiler "gcc")
    (c-compiler-flags "-g -O2")
    (c-include-directories ("."))
    (c-link-directories ("."))
    (scheme-include-directories ("." "./library"))
    (c-link-libraries ("sqlite3" "quadmath" "gc"))
    (wile-config ("-DWILE_USES_SQLITE" "-DWILE_USES_INT128"
		  "-DWILE_USES_QUAD_DOUBLE" "-DWILE_USES_GC"))))

(load-library "wile-macros.scm")
(load-library "hash.scm")
(load-library "wile-comp.scm")

;;; the old version; the new version needs a bytevector size. getting
;;; that is doable, but the usage here will likely be less efficient
;;; than using this old version

(define (rem-unused-old lines)
  (let ((decl (hash-table-create string-hash string=?))
	(set (hash-table-create string-hash string=?))
	(used (hash-table-create string-hash string=?))
	(re-dec "^((__attribute__[(][(]unused[)][)]|static)[ \t]+)?(lval|lptr|lptr[*]) var_[0-9]+(\[[0-9]+\])?(;| = LVI_(NIL|BOOL|INT|CHAR|REAL|RAT))")
	(re-set "^var_[0-9]+ =")
	(re-use "var_[0-9]+")
	(re-num "[0-9]+")
	(re-copy "^var_[0-9]+ = var_[0-9]+;")
	(multi-dec "warning! var_%s is being declared more than once!\n")
	(output ()))
    (for-each (lambda (l)
		(let ((r l))
		  (cond ((regex-match re-dec l)
			 (let ((var (cadr (regex-match re-num l))))
			   (if (hash-table-contains? decl var)
			       (fprintf stderr multi-dec var)
			       (hash-table-set! decl var 1))
			   (set! r #f)))
			((regex-match re-set l)
			 (let ((chop (regex-match re-num l)))
			   (hash-table-set! set (cadr chop) 1)
			   (set! r (caddr chop)))))
		  (while r
			 (set! r
			       (let ((chop1 (regex-match re-use r)))
				 (if chop1
				     (let ((chop2 (regex-match re-num (cadr chop1))))
				       (hash-table-set! used (cadr chop2) 1)
				       (caddr chop1))
				     #f))))
))
	      lines)
    (let ((count 0))
      (for-each (lambda (v)
		  (unless (hash-table-contains? decl v)
		    (add-output (string-append "// var_" v " undeclared"))
		    (set! count (+ count 1))))
		(hash-table-keys set))
      (when (positive? count)
	(fprintf stderr
		 "wile error: %d set but undeclared variables!\n" count)))
    (let ((count 0))
      (for-each (lambda (v)
		  (unless (hash-table-contains? used v)
		    (set! count (+ count 1))))
		(hash-table-keys set))
      (for-each (lambda (v)
		  (unless (hash-table-contains? used v)
		    (set! count (+ count 1))))
		(hash-table-keys decl))
      (if (zero? count)
	  lines
	  (begin
	    (when (> global-verbose 0)
	      (fprintf stderr "set but unused variables: %d\n" count))
	    (for-each (lambda (l)
			(let* ((var1 (regex-match re-num l))
			       (var (if var1 (cadr var1) #f)))
			  (cond ((regex-match re-dec l)
				 (when (hash-table-contains? used var)
				   (add-output l)))
				((regex-match re-set l)
				 (if (hash-table-contains? used var)
				     (add-output l)
				     (let ((ix (string-find-first-char l #\=)))
				       (unless (regex-match re-copy l)
					 (add-output "(void)")
					 (add-output
					  (string-copy l (+ ix 1)))))))
				(else (add-output l)))))
		      lines)
	    (rem-unused-old (list-reverse output)))))))

(load-library "test.scm")
(test-title "wile compiler tests: expressions")
(test-mode 'report-failed)	;;; 'off 'summary 'report-failed 'report
;;; (test-mode 'off)

(define (filter-stack-trace input)
  (if (and (not (null? input))
	   (string=? (car input) "wile stack trace begin"))
      (let loop ((input input))
	(cond ((null? input) ())
	      ((string=? (car input) "wile stack trace end")
	       (cdr input))
	      (else (loop (cdr input)))))
      input))

(define (doco expr)
  (set! expr (list 'begin (list 'display expr) (list 'newline)))
  (remove-file "wile-out.c")
  (remove-file "wile-out.o")
  (remove-file "coyote")

  (fluid-let ((global-out (make-string-bag ())))
    (emit-str global-file-head)
    (for-each (lambda (v) (emit-fstr "lval var_%s;\n" v))
	      '("argv" "cmd_name" "stdin" "stdout" "stderr"
		"pi" "euler_gamma" "show_sign" "int_base"
		"flt_base" "flt_precision"))
    (let ((r #f)
	  (a1 (number->string global-tc-min-args)))
      (emit-code
       "struct wile_profile_t* wile_profile;"
       "int wile_profile_size;"
       "const int wile_tc_min_args = @1;"
       ""
       "lval wile_main(int argc, char** argv)"
       "{"
       "wile_profile = NULL;"
       "wile_profile_size = 0;"))
    (emit-function-tail (compile-expr (make-top-env 'singleton) #f expr))
    (let ((out-port (open-file "wile-out.c" "w+")))
      (display global-out out-port)
      (set-string-bag-bag! global-out ())
      (let* ((lines1 (read-all-lines out-port))
	     (lines2 (rem-unused-old lines1)))
	(set-file-position out-port 0 'start)
	(for-each (lambda (l) (write-string out-port l #\newline)) lines2)
	(flush-port out-port)
	(truncate-file out-port))
      (close-port out-port)))
  (run-command "./wile -x wile-out.c coyote > coy.log")
  (run-command "coyote > coy-run.log 2>&1")
  (let ((fp (open-input-file "coy-run.log")))
    (let lupus ((input '()))
      (let ((line (read-line fp)))
	(if line
	    (lupus (cons line input))
	  (begin
	    (close-port fp)
	    (if (null? input)
		"<no input>"
		(apply string-join-by "\n"
		       (filter-stack-trace (reverse input))))))))))

;;; immediate(ish) values

(test "()" (doco ()))
(test "#\\G" (doco #\G))
(test "#f" (doco #f))
(test "42" (doco 42))
(test "42/17" (doco 42/17))
(test "3.141592653589793e+00" (doco pi))

(test "3.141592653589793e+00+2.718281828459045e+00i"
      (doco '(cmplx pi (exp 1.0))))
(test "3.141592653589793e+00+2.718281828459045e+00i"
      (doco '(make-rectangular pi (exp 1.0))))
(test "3.141592653589793e+00-2.718281828459045e+00i"
      (doco '(complex-conjugate (cmplx pi (exp 1.0)))))
(test "3.141592653589793e+00-2.718281828459045e+00i"
      (doco '(cconj (cmplx pi (exp 1.0)))))
(test "1.000000000000000e+00+1.000000000000000e+00i"
      (doco '(make-polar (sqrt 2.0) (atan 1.0 1.0))))

(test "\"Now hear this!\"" (doco "Now hear this!"))
(test "iamsymbolhearmeroar" (doco '(quote iamsymbolhearmeroar)))

(unless (test-mode? 'off)
  (write-string
   "######## expected failures: outputs are intrinsically variable"))
(test "12345" (doco '(get-process-id)))
(test "12345" (doco '(get-parent-process-id)))
(test "1000" (doco '(get-session-id 501)))
(test "12345" (doco '(set-session-id)))
(test "1671531000" (doco '(epochtime)))
(test "12345\n0" (doco '(fork-process)))
(test "(1.700000000000000e-03 0.000000000000000e+00)" (doco '(cputime)))

(test
 "0.51819116 0.05075196 2\n0.62981500 1.68149794 2\n0.06528707 2.20133852 0\n0.33391803 1.20075537 2\n0.67254810 0.15472715 0\n0.91726920 0.12780792 3\n0.41742128 0.27162624 4\n0.05885305 2.56498005 3\n0.41488922 1.81670410 2\n0.09632684 1.94364052 0\n10"
 (doco '
  (let ((i 0))
    (random-seed!)
    (while (< i 10)
	   (set! i (+ i 1))
	   (write-string (number->string (random-uniform) 10 8))
	   (write-string #\space)
	   (write-string (number->string (random-exponential) 10 8))
	   (write-string #\space)
	   (write-string (number->string (random-poisson 2.5)))
	   (write-string #\newline)))))

(test "(2023 9 16 23 55 37 6 258 1)" (doco '(UTCtime)))
(test "(2023 9 16 23 55 37 6 258 1)" (doco '(localtime)))
(test "(64769 49284164 33216 1 1000 1000 0 279224 4096 552 1694933870 1694933870 1694933870)" (doco '(get-file-status "coyote")))
(test "(64769 49284164 33216 1 1000 1000 0 279224 4096 552 1694933870 1694933870 1694933870)" (doco '(get-symbolic-link-status "coyote")))

(unless (test-mode? 'off)
  (write-string
   "\n######## possible failures: outputs are system-dependent\n"))
(test "\"/home/uwe/github/wile\"" (doco '(get-current-directory)))

(test "\"/home/uwe/github\""
      (doco '(begin (set-current-directory "..") (get-current-directory))))

(test "\"sleipnir\"" (doco '(get-host-name)))
(test "\"(none)\"" (doco '(get-domain-name)))

(test "(\"uwe\" \"x\" 1000 1000 \"Uwe Hollerbach,,,\" \"/home/uwe\" \"/bin/bash\")"
      (doco '(get-user-information "uwe")))

(unless (test-mode? 'off)
  (write-string "######## end of expected failures\n"))

(test "#f" (doco '(get-file-status "fleekslet.dat")))
(test "#f" (doco '(get-symbolic-link-status "fleekslet.dat")))

(test "(1970 1 15 6 56 7 4 14 0)" (doco '(UTCtime 1234567)))
(test "(1970 1 14 22 56 7 3 13 0)" (doco '(localtime 1234567)))

(test "1000" (doco '(get-user-id)))
(test "#f" (doco '(set-user-id 501)))
(test "1000" (doco '(get-effective-user-id)))
(test "#t" (doco '(set-effective-user-id 1000)))	;;; should succeed
							;;; because it's same
(test "1000" (doco '(get-group-id)))
(test "#f" (doco '(set-group-id 501)))
(test "1000" (doco '(get-effective-group-id)))
(test "#f" (doco '(set-effective-group-id 501)))

(test " symbol.1" (doco '(gensym)))

(run-command "echo yowza > yow.dat")
(test "\"yowza\"" (doco '(read-line (open-file "yow.dat" "r"))))
(test "#\\y" (doco '(read-char (open-file "yow.dat" "r"))))

(test "\n#t" (doco '(newline)))
(test "boomshakalakaboomshakalaka" (doco '(display 'boomshakalaka)))

(test "3" (doco '(string->number "3")))
(test "4/7" (doco '(string->number "8/14")))
(test "3.141590000000000e+00" (doco '(string->number "3.14159")))

(test "1/1" (doco '(make-rational 1 1)))
(test "1/0" (doco '(make-rational 1 0)))
(test "-1/1" (doco '(make-rational 1 -1)))
(test "0/1" (doco '(make-rational 0 1)))
(test "0/0" (doco '(make-rational 0 0)))
(test "0/1" (doco '(make-rational 0 -1)))
(test "-1/1" (doco '(make-rational -1 1)))
(test "-1/0" (doco '(make-rational -1 0)))
(test "1/1" (doco '(make-rational -1 -1)))

(test "#t" (doco '(even? 2)))
(test "#f" (doco '(even? 3)))
(test "#f" (doco '(odd? 2)))
(test "#t" (doco '(odd? 3)))
(test "#f" (doco '(zero? 3)))
(test "#t" (doco '(zero? 0)))
(test "#f" (doco '(zero? 3/2)))
(test "#f" (doco '(zero? (make-rational 1 1))))
(test "#f" (doco '(zero? (make-rational 1 0))))
(test "#f" (doco '(zero? (make-rational 1 -1))))
(test "#t" (doco '(zero? (make-rational 0 1))))
(test "#f" (doco '(zero? (make-rational 0 0))))
(test "#t" (doco '(zero? (make-rational 0 -1))))
(test "#f" (doco '(zero? (make-rational -1 1))))
(test "#f" (doco '(zero? (make-rational -1 0))))
(test "#f" (doco '(zero? (make-rational -1 -1))))
(test "#t" (doco '(zero? 0.0)))
(test "#f" (doco '(zero? 1.3)))
(test "#t" (doco '(zero? (cmplx 0.0 0.0))))
(test "#f" (doco '(zero? (cmplx 0.0 1.0))))
(test "#f" (doco '(zero? (cmplx 1.0 0.0))))

(test "0.000000000000000e+00" (doco '(cmplx 0 0)))
(test "1.000000000000000e+00i" (doco '(cmplx 0 1)))
(test "3.333333333333333e-01+4.285714285714286e-01i" (doco '(cmplx 1/3 3/7)))
(test "-NaN.0+Inf.0i" (doco '(cmplx -NaN.0 +Inf.0)))

(test "#f" (doco '(positive? -32)))
(test "#f" (doco '(positive? 0)))
(test "#t" (doco '(positive? 3)))
(test "#f" (doco '(positive? -32.0)))
(test "#f" (doco '(positive? 0.0)))
(test "#t" (doco '(positive? 3.0)))

(test "#f" (doco '(positive? -32/3)))
(test "#t" (doco '(positive? (make-rational 1 1))))
(test "#t" (doco '(positive? (make-rational 1 0))))
(test "#f" (doco '(positive? (make-rational 1 -1))))
(test "#f" (doco '(positive? (make-rational 0 1))))
(test "#f" (doco '(positive? (make-rational 0 0))))
(test "#f" (doco '(positive? (make-rational 0 -1))))
(test "#f" (doco '(positive? (make-rational -1 1))))
(test "#f" (doco '(positive? (make-rational -1 0))))
(test "#t" (doco '(positive? (make-rational -1 -1))))
(test "#t" (doco '(positive? 3/2)))

(test "#t" (doco '(negative? -32)))
(test "#f" (doco '(negative? 0)))
(test "#f" (doco '(negative? 3)))
(test "#t" (doco '(negative? -32.0)))
(test "#f" (doco '(negative? 0.0)))
(test "#f" (doco '(negative? 3.0)))

(test "#f" (doco '(negative? 32/3)))
(test "#f" (doco '(negative? (make-rational 1 1))))
(test "#f" (doco '(negative? (make-rational 1 0))))
(test "#t" (doco '(negative? (make-rational 1 -1))))
(test "#f" (doco '(negative? (make-rational 0 1))))
(test "#f" (doco '(negative? (make-rational 0 0))))
(test "#f" (doco '(negative? (make-rational 0 -1))))
(test "#t" (doco '(negative? (make-rational -1 1))))
(test "#t" (doco '(negative? (make-rational -1 0))))
(test "#f" (doco '(negative? (make-rational -1 -1))))
(test "#t" (doco '(negative? -3/2)))

(test "#t" (doco '(null? ())))
(test "#f" (doco '(null? -32)))
(test "#f" (doco '(null? "cheese")))

(test "#t" (doco '(char? #\G)))
(test "#f" (doco '(char? "G")))
(test "#f" (doco '(char? 17)))
(test "#f" (doco '(char? ())))

(test "#t" (doco '(boolean? #f)))
(test "#f" (doco '(boolean? "#f")))
(test "#f" (doco '(boolean? 17)))
(test "#f" (doco '(boolean? ())))

(test "#t" (doco '(string? "foo")))
(test "#f" (doco '(string? 'foo)))
(test "#f" (doco '(string? 17)))
(test "#f" (doco '(string? ())))

(test "#f" (doco '(symbol? "foo")))
(test "#t" (doco '(symbol? 'foo)))
(test "#f" (doco '(symbol? 17)))
(test "#f" (doco '(symbol? ())))

(test "#f" (doco '(integer? "foo")))
(test "#f" (doco '(integer? 'foo)))
(test "#t" (doco '(integer? 17)))
(test "#f" (doco '(integer? ())))

(test "#f" (doco '(rational? "foo")))
(test "#f" (doco '(rational? 'foo)))
(test "#t" (doco '(rational? 17)))
(test "#t" (doco '(rational? 17/3)))
(test "#f" (doco '(rational? ())))

(test "#f" (doco '(real? "foo")))
(test "#f" (doco '(real? 'foo)))
(test "#t" (doco '(real? 17)))
(test "#t" (doco '(real? 17/3)))
(test "#t" (doco '(real? 17.3)))
(test "#f" (doco '(real? ())))

(test "#f" (doco '(complex? "foo")))
(test "#f" (doco '(complex? 'foo)))
(test "#t" (doco '(complex? 17)))
(test "#t" (doco '(complex? 17/3)))
(test "#t" (doco '(complex? 17.3)))
(test "#t" (doco '(complex? (cmplx 3.14159 2.7182818))))
(test "#f" (doco '(complex? ())))

(test "#f" (doco '(number? "foo")))
(test "#f" (doco '(number? 'foo)))
(test "#t" (doco '(number? 17)))
(test "#t" (doco '(number? 17/3)))
(test "#t" (doco '(number? 17.3)))
(test "#t" (doco '(number? (cmplx 3.14159 2.7182818))))
(test "#f" (doco '(number? ())))

(test "#f" (doco '(not 1)))
(test "#f" (doco '(not ())))
(test "3" (doco '(let ((cheese 3)) cheese)))
(test "#f" (doco '(let ((cheese #t)) (not cheese))))
(test "#t" (doco '(let ((cheese #f)) (not cheese))))
(test "#f" (doco '(not 'cheese)))
(test "#t" (doco '(not #f)))

(test "vrai" (doco '(let ((cheese #t)) (if cheese 'vrai 'faux))))
(test "faux" (doco '(let ((cheese #f)) (if cheese 'vrai 'faux))))

(test "yah" (doco '(let ((cheese #t)
			 (vrai 'yah)
			 (faux 'nah))
		     (if cheese vrai faux))))
(test "nah" (doco '(let ((cheese #f)
			 (vrai 'yah)
			 (faux 'nah))
		     (if cheese vrai faux))))

(test "loopy!1" (doco '(let ((i #t))
			 (while i
				(set! i #f)
				(write-string "loopy!")))))

(test "#f" (doco '(let ((a #t)
			(b #t)
			(c #f))
		    (and a b c))))

(test "a" (doco '(let ((a #f)
		       (b 'a)
		       (c #f))
		   (or a b c))))

(test "b is true\n1" (doco '(let ((a #f)
				   (b #t))
			       (cond
				(a (write-string "a is true\n"))
				(b (write-string "b is true\n"))
				(else (write-string "neither is true\n"))))))

(test "vrai1" (doco '(let ((a "vrai")
			   (b "faux"))
		       (set! b a)
		       (write-string b))))

(test "#t" (doco '(finite? 1.0)))
(test "#t" (doco '(finite? 1.0e99)))


(test "#t" (doco '(finite? (exp 1.0))))
(test "#f" (doco '(infinite? (exp 1.0))))
(test "#t" (doco '(finite? (exp 100.0))))
(test "#f" (doco '(infinite? (exp 100.0))))
(test "#f" (doco '(nan? (exp 100.0))))

(test "#t" (doco '(finite? 1/14)))
(test "#f" (doco '(infinite? 1/14)))
(test "#f" (doco '(finite? (make-rational 1 0))))
(test "#t" (doco '(infinite? (make-rational 1 0))))
(test "#f" (doco '(nan? (make-rational 1 0))))
(test "#t" (doco '(nan? (make-rational 0 0))))

(test "+Inf.0" (doco '(exp 1.0e5)))
(test "#f" (doco '(finite? (exp 1.0e5))))
(test "#t" (doco '(infinite? (exp 1.0e5))))
(test "#f" (doco '(nan? (exp 1.0e5))))

(test "17" (doco '(abs 17)))
(test "17" (doco '(abs -17)))
(test "17" (doco '(magnitude 17)))
(test "17" (doco '(magnitude -17)))
(test "1" (doco '(sign 17)))
(test "-1" (doco '(sign -17)))
(test "0" (doco '(sign 0)))

(test "1" (doco '(sign 17/3)))
(test "-1" (doco '(sign -17/3)))

(test "1" (doco '(sign (make-rational 1 3))))
(test "-1" (doco '(sign (make-rational -1 3))))
(test "1" (doco '(sign (make-rational -1 -3))))
(test "-1" (doco '(sign (make-rational 1 -3))))

(test "1" (doco '(sign (make-rational 1 0))))
(test "-1" (doco '(sign (make-rational -1 0))))
(test "0" (doco '(sign (make-rational 0 0))))

(test "1" (doco '(sign 1.2)))
(test "0" (doco '(sign 0.0)))
(test "-1" (doco '(sign -1.2)))
(test "1" (doco '(sign +Inf.0)))
(test "-1" (doco '(sign -Inf.0)))

(test "0" (doco '(sign +NaN.0)))
(test "0" (doco '(sign -NaN.0)))

(test "17" (doco '(numerator 17/7)))
(test "7" (doco '(denominator 17/7)))

(test "3.141590000000000e+00" (doco '(real-part (cmplx 3.14159 2.7182818))))
(test "3.141590000000000e+00" (doco '(creal (cmplx 3.14159 2.7182818))))
(test "2.718281800000000e+00" (doco '(imag-part (cmplx 3.14159 2.7182818))))
(test "2.718281800000000e+00" (doco '(cimag (cmplx 3.14159 2.7182818))))

(test "-5" (doco '(negative 5)))
(test "5" (doco '(negative -5)))

(test "-5/3" (doco '(negative 5/3)))
(test "5/3" (doco '(negative -5/3)))

(test "-5.300000000000000e+00" (doco '(negative 5.3)))
(test "5.300000000000000e+00" (doco '(negative -5.3)))

(test "-5.300000000000000e+00-1.100000000000000e+00i"
      (doco '(negative (cmplx 5.3 1.1))))

(test "5.300000000000000e+00+1.100000000000000e+00i"
      (doco '(negative (cmplx -5.3 -1.1))))

(test "1/5" (doco '(reciprocal 5)))
(test "-1/5" (doco '(reciprocal -5)))

(test "-1" (doco '(numerator (reciprocal -5))))
(test "5" (doco '(denominator (reciprocal -5))))

(test "3/5" (doco '(reciprocal 5/3)))
(test "-3/5" (doco '(reciprocal -5/3)))

(test "-3" (doco '(numerator (reciprocal -5/3))))
(test "5" (doco '(denominator (reciprocal -5/3))))

(test "1.904761904761905e-01" (doco '(reciprocal 5.25)))
(test "1.000000000000000e-01-3.000000000000000e-01i"
      (doco '(reciprocal (cmplx 1.0 3.0))))

;;; specific to quadmath

(test "\"1.681051571556047e-4932\""
      (doco '(number->string
	      (reciprocal 5.94865747678615882543e+4931) 10 -15)))

(test "1.000000000000000e-4931-3.000000000000000e-4931i"
      (doco '(reciprocal (cmplx 1.0e4930 3.0e4930))))

(test "7" (doco '(i+ 3 4)))
(test "-1" (doco '(i+ 3 -4)))

(test "3" (doco '(i- 7 4)))
(test "4" (doco '(i- 3 -1)))
(test "-2" (doco '(i- 1 3)))

(test "12" (doco '(i* 3 4)))
(test "-12" (doco '(i* 3 -4)))
(test "-12" (doco '(i* -3 4)))
(test "12" (doco '(i* -3 -4)))

(test "3/5" (doco '(i/ 3 5)))
(test "3" (doco '(numerator (i/ 3 5))))
(test "5" (doco '(denominator (i/ 3 5))))

(test "-3/5" (doco '(i/ 3 -5)))
(test "-3" (doco '(numerator (i/ 3 -5))))
(test "5" (doco '(denominator (i/ 3 -5))))

(test "-3/5" (doco '(i/ -3 5)))
(test "-3" (doco '(numerator (i/ -3 5))))
(test "5" (doco '(denominator (i/ -3 5))))

(test "3/5" (doco '(i/ -3 -5)))
(test "3" (doco '(numerator (i/ -3 -5))))
(test "5" (doco '(denominator (i/ -3 -5))))

(test "7/12" (doco '(q+ 1/4 1/3)))
(test "1/2" (doco '(q+ 1/4 1/4)))
(test "1" (doco '(numerator (q+ 1/4 1/4))))
(test "2" (doco '(denominator (q+ 1/4 1/4))))
(test "1/2" (doco '(q+ 2/8 2/8)))
(test "1" (doco '(numerator (q+ 2/8 2/8))))
(test "2" (doco '(denominator (q+ 2/8 2/8))))

(test "-1/12" (doco '(q- 1/4 1/3)))
(test "1/3" (doco '(q- 7/12 1/4)))
(test "1" (doco '(numerator (q- 7/12 1/4))))
(test "3" (doco '(denominator (q- 7/12 1/4))))

(test "1/4" (doco '(q* 1/10 5/2)))
(test "1" (doco '(numerator (q* 1/10 5/2))))
(test "4" (doco '(denominator (q* 1/10 5/2))))

(test "1/4" (doco '(q/ 1/10 2/5)))
(test "1" (doco '(numerator (q/ 1/10 2/5))))
(test "4" (doco '(denominator (q/ 1/10 2/5))))

(test "7.000000000000000e+00" (doco '(r+ 3.0 4.0)))
(test "-1.000000000000000e+00" (doco '(r+ 3.0 -4.0)))

(test "3.000000000000000e+00" (doco '(r- 7.0 4.0)))
(test "4.000000000000000e+00" (doco '(r- 3.0 -1.0)))
(test "-2.000000000000000e+00" (doco '(r- 1.0 3.0)))

(test "1.200000000000000e+01" (doco '(r* 3.0 4.0)))
(test "-1.200000000000000e+01" (doco '(r* 3.0 -4.0)))
(test "-1.200000000000000e+01" (doco '(r* -3.0 4.0)))
(test "1.200000000000000e+01" (doco '(r* -3.0 -4.0)))

(test "6.000000000000000e-01" (doco '(r/ 3.0 5.0)))
(test "-6.000000000000000e-01" (doco '(r/ 3.0 -5.0)))
(test "-6.000000000000000e-01" (doco '(r/ -3.0 5.0)))
(test "6.000000000000000e-01" (doco '(r/ -3.0 -5.0)))

(test "5.000000000000000e+00+3.000000000000000e+00i"
      (doco '(c+ (cmplx 3.0 4.0) (cmplx 2.0 -1.0))))
(test "2.000000000000000e+00-6.000000000000000e+00i"
      (doco '(c+ (cmplx 3.0 -4.0) (cmplx -1.0 -2.0))))

(test "3.000000000000000e+00+4.000000000000000e+00i"
      (doco '(c- (c+ (cmplx 3.0 4.0) (cmplx 2.0 -1.0)) (cmplx 2.0 -1.0))))
(test "3.000000000000000e+00-4.000000000000000e+00i"
      (doco '(c- (c+ (cmplx 3.0 -4.0) (cmplx -1.0 -2.0)) (cmplx -1.0 -2.0))))

(test "1.000000000000000e+00+5.000000000000000e+00i"
      (doco '(c- (cmplx 3.0 4.0) (cmplx 2.0 -1.0))))
(test "4.000000000000000e+00-2.000000000000000e+00i"
      (doco '(c- (cmplx 3.0 -4.0) (cmplx -1.0 -2.0))))

(test "3.000000000000000e+00+4.000000000000000e+00i"
      (doco '(c+ (c- (cmplx 3.0 4.0) (cmplx 2.0 -1.0)) (cmplx 2.0 -1.0))))
(test "3.000000000000000e+00-4.000000000000000e+00i"
      (doco '(c+ (c- (cmplx 3.0 -4.0) (cmplx -1.0 -2.0)) (cmplx -1.0 -2.0))))

(test "1.000000000000000e+01+5.000000000000000e+00i"
      (doco '(c* (cmplx 3.0 4.0) (cmplx 2.0 -1.0))))
(test "-1.100000000000000e+01-2.000000000000000e+00i"
      (doco '(c* (cmplx 3.0 -4.0) (cmplx -1.0 -2.0))))

(test "3.000000000000000e+00+4.000000000000000e+00i"
      (doco '(c/ (c* (cmplx 3.0 4.0) (cmplx 2.0 -1.0)) (cmplx 2.0 -1.0))))
(test "3.000000000000000e+00-4.000000000000000e+00i"
      (doco '(c/ (c* (cmplx 3.0 -4.0) (cmplx -1.0 -2.0)) (cmplx -1.0 -2.0))))

(test "4.000000000000000e-01+2.200000000000000e+00i"
      (doco '(c/ (cmplx 3.0 4.0) (cmplx 2.0 -1.0))))
(test "1.000000000000000e+00+2.000000000000000e+00i"
      (doco '(c/ (cmplx 3.0 -4.0) (cmplx -1.0 -2.0))))

(test "3.000000000000000e+00+4.000000000000000e+00i"
      (doco '(c* (c/ (cmplx 3.0 4.0) (cmplx 2.0 -1.0)) (cmplx 2.0 -1.0))))
(test "3.000000000000000e+00-4.000000000000000e+00i"
      (doco '(c* (c/ (cmplx 3.0 -4.0) (cmplx -1.0 -2.0)) (cmplx -1.0 -2.0))))

(test "6.000000000000000e-01" (doco '(c/ (cmplx 3.0 0.0) (cmplx 5.0 0.0))))
(test "-6.000000000000000e-01" (doco '(c/ (cmplx 3.0 0.0) (cmplx -5.0 0.0))))
(test "-6.000000000000000e-01" (doco '(c/ (cmplx -3.0 0.0) (cmplx 5.0 0.0))))
(test "6.000000000000000e-01" (doco '(c/ (cmplx -3.0 0.0) (cmplx -5.0 0.0))))

(test "0" (doco '(+)))

(test "3" (doco '(+ 3)))
(test "17/3" (doco '(+ 17/3)))
(test "1.350000000000000e+01" (doco '(+ 13.5)))
(test "1.000000000000000e+00+3.100000000000000e+00i"
      (doco '(+ (cmplx 1.0 3.1))))

(test "12" (doco '(+ 3 4 5)))
(test "27/2" (doco '(+ 3 4 5 3/2)))

(test "3.900000000000000e+01" (doco '(+ 3 4.5 5/2 13 15.5 1/2)))

(test "1" (doco '(*)))

(test "3" (doco '(* 3)))
(test "17/3" (doco '(* 17/3)))
(test "1.350000000000000e+01" (doco '(* 13.5)))
(test "1.000000000000000e+00+3.100000000000000e+00i"
      (doco '(* (cmplx 1.0 3.1))))

(test "3.400312500000000e+03" (doco '(* 3 4.5 5/2 13 15.5 1/2)))

(test "60" (doco '(* 3 4 5)))
(test "90" (doco '(* 3 4 5 3/2)))
(test "180/7" (doco '(* 3 4 5 3/7)))

(test "0" (doco '(-)))

(test "-3" (doco '(- 3)))
(test "-17/3" (doco '(- 17/3)))
(test "-1.350000000000000e+01" (doco '(- 13.5)))
(test "-1.000000000000000e+00-3.100000000000000e+00i"
      (doco '(- (cmplx 1.0 3.1))))

(test "-3.300000000000000e+01" (doco '(- 3 4.5 5/2 13 15.5 1/2)))

(test "-2" (doco '(- 5 4 3)))
(test "-5/2" (doco '(- 5 4 3 1/2)))

(test "2" (doco '(+ 5/3 1/3)))
(test "1" (doco '(- 5/3 2/3)))
(test "2" (doco '(* 10/3 3/5)))
(test "2" (doco '(/ 10/3 5/3)))

(test "1" (doco '(/)))

(test "1/3" (doco '(/ 3)))
(test "3/17" (doco '(/ 17/3)))
(test "7.407407407407407e-02" (doco '(/ 13.5)))
(test "9.425070688030160e-02-2.921771913289350e-01i"
      (doco '(/ (cmplx 1.0 3.1))))

(test "2.646815550041356e-03" (doco '(/ 3 4.5 5/2 13 15.5 1/2)))

(test "5/12" (doco '(/ 5 4 3)))
(test "5/6" (doco '(/ 5 4 3 1/2)))
(test "2" (doco '(/ 120 3 4 5)))

(test "1" (doco '(gcd 17 5)))
(test "1" (doco '(gcd 17 -5)))
(test "1" (doco '(gcd -17 5)))
(test "1" (doco '(gcd -17 -5)))

(test "5" (doco '(gcd 15 25)))
(test "85" (doco '(lcm 17 5)))
(test "75" (doco '(lcm 15 25)))

(test "5" (doco '(min 17 5)))
(test "17" (doco '(max 17 5)))

(test "#f" (doco '(< 3 3)))
(test "#f" (doco '(< 3 -2)))
(test "#t" (doco '(< 3 5)))
(test "#f" (doco '(< 3 -6)))
(test "#f" (doco '(< 3 1/3)))
(test "#t" (doco '(< 3 10/3)))
(test "#f" (doco '(< 3 -2/3)))
(test "#f" (doco '(< 3 -17/4)))
(test "#f" (doco '(< 3 3.00000000)))
(test "#t" (doco '(< 3 5.50000000)))
(test "#f" (doco '(< 3 -6.20000000)))
(test "#t" (doco '(< -2 3)))
(test "#f" (doco '(< -2 -2)))
(test "#t" (doco '(< -2 5)))
(test "#f" (doco '(< -2 -6)))
(test "#t" (doco '(< -2 1/3)))
(test "#t" (doco '(< -2 10/3)))
(test "#t" (doco '(< -2 -2/3)))
(test "#f" (doco '(< -2 -17/4)))
(test "#t" (doco '(< -2 3.00000000)))
(test "#t" (doco '(< -2 5.50000000)))
(test "#f" (doco '(< -2 -6.20000000)))
(test "#f" (doco '(< 5 3)))
(test "#f" (doco '(< 5 -2)))
(test "#f" (doco '(< 5 5)))
(test "#f" (doco '(< 5 -6)))
(test "#f" (doco '(< 5 1/3)))
(test "#f" (doco '(< 5 10/3)))
(test "#f" (doco '(< 5 -2/3)))
(test "#f" (doco '(< 5 -17/4)))
(test "#f" (doco '(< 5 3.00000000)))
(test "#t" (doco '(< 5 5.50000000)))
(test "#f" (doco '(< 5 -6.20000000)))
(test "#t" (doco '(< -6 3)))
(test "#t" (doco '(< -6 -2)))
(test "#t" (doco '(< -6 5)))
(test "#f" (doco '(< -6 -6)))
(test "#t" (doco '(< -6 1/3)))
(test "#t" (doco '(< -6 10/3)))
(test "#t" (doco '(< -6 -2/3)))
(test "#t" (doco '(< -6 -17/4)))
(test "#t" (doco '(< -6 3.00000000)))
(test "#t" (doco '(< -6 5.50000000)))
(test "#f" (doco '(< -6 -6.20000000)))
(test "#t" (doco '(< 1/3 3)))
(test "#f" (doco '(< 1/3 -2)))
(test "#t" (doco '(< 1/3 5)))
(test "#f" (doco '(< 1/3 -6)))
(test "#f" (doco '(< 1/3 1/3)))
(test "#t" (doco '(< 1/3 10/3)))
(test "#f" (doco '(< 1/3 -2/3)))
(test "#f" (doco '(< 1/3 -17/4)))
(test "#t" (doco '(< 1/3 3.00000000)))
(test "#t" (doco '(< 1/3 5.50000000)))
(test "#f" (doco '(< 1/3 -6.20000000)))
(test "#f" (doco '(< 10/3 3)))
(test "#f" (doco '(< 10/3 -2)))
(test "#t" (doco '(< 10/3 5)))
(test "#f" (doco '(< 10/3 -6)))
(test "#f" (doco '(< 10/3 1/3)))
(test "#f" (doco '(< 10/3 10/3)))
(test "#f" (doco '(< 10/3 -2/3)))
(test "#f" (doco '(< 10/3 -17/4)))
(test "#f" (doco '(< 10/3 3.00000000)))
(test "#t" (doco '(< 10/3 5.50000000)))
(test "#f" (doco '(< 10/3 -6.20000000)))
(test "#t" (doco '(< -2/3 3)))
(test "#f" (doco '(< -2/3 -2)))
(test "#t" (doco '(< -2/3 5)))
(test "#f" (doco '(< -2/3 -6)))
(test "#t" (doco '(< -2/3 1/3)))
(test "#t" (doco '(< -2/3 10/3)))
(test "#f" (doco '(< -2/3 -2/3)))
(test "#f" (doco '(< -2/3 -17/4)))
(test "#t" (doco '(< -2/3 3.00000000)))
(test "#t" (doco '(< -2/3 5.50000000)))
(test "#f" (doco '(< -2/3 -6.20000000)))
(test "#t" (doco '(< -17/4 3)))
(test "#t" (doco '(< -17/4 -2)))
(test "#t" (doco '(< -17/4 5)))
(test "#f" (doco '(< -17/4 -6)))
(test "#t" (doco '(< -17/4 1/3)))
(test "#t" (doco '(< -17/4 10/3)))
(test "#t" (doco '(< -17/4 -2/3)))
(test "#f" (doco '(< -17/4 -17/4)))
(test "#t" (doco '(< -17/4 3.00000000)))
(test "#t" (doco '(< -17/4 5.50000000)))
(test "#f" (doco '(< -17/4 -6.20000000)))
(test "#f" (doco '(< 3.00000000 3)))
(test "#f" (doco '(< 3.00000000 -2)))
(test "#t" (doco '(< 3.00000000 5)))
(test "#f" (doco '(< 3.00000000 -6)))
(test "#f" (doco '(< 3.00000000 1/3)))
(test "#t" (doco '(< 3.00000000 10/3)))
(test "#f" (doco '(< 3.00000000 -2/3)))
(test "#f" (doco '(< 3.00000000 -17/4)))
(test "#f" (doco '(< 3.00000000 3.00000000)))
(test "#t" (doco '(< 3.00000000 5.50000000)))
(test "#f" (doco '(< 3.00000000 -6.20000000)))
(test "#f" (doco '(< 5.50000000 3)))
(test "#f" (doco '(< 5.50000000 -2)))
(test "#f" (doco '(< 5.50000000 5)))
(test "#f" (doco '(< 5.50000000 -6)))
(test "#f" (doco '(< 5.50000000 1/3)))
(test "#f" (doco '(< 5.50000000 10/3)))
(test "#f" (doco '(< 5.50000000 -2/3)))
(test "#f" (doco '(< 5.50000000 -17/4)))
(test "#f" (doco '(< 5.50000000 3.00000000)))
(test "#f" (doco '(< 5.50000000 5.50000000)))
(test "#f" (doco '(< 5.50000000 -6.20000000)))
(test "#t" (doco '(< -6.20000000 3)))
(test "#t" (doco '(< -6.20000000 -2)))
(test "#t" (doco '(< -6.20000000 5)))
(test "#t" (doco '(< -6.20000000 -6)))
(test "#t" (doco '(< -6.20000000 1/3)))
(test "#t" (doco '(< -6.20000000 10/3)))
(test "#t" (doco '(< -6.20000000 -2/3)))
(test "#t" (doco '(< -6.20000000 -17/4)))
(test "#t" (doco '(< -6.20000000 3.00000000)))
(test "#t" (doco '(< -6.20000000 5.50000000)))
(test "#f" (doco '(< -6.20000000 -6.20000000)))
(test "#t" (doco '(<= 3 3)))
(test "#f" (doco '(<= 3 -2)))
(test "#t" (doco '(<= 3 5)))
(test "#f" (doco '(<= 3 -6)))
(test "#f" (doco '(<= 3 1/3)))
(test "#t" (doco '(<= 3 10/3)))
(test "#f" (doco '(<= 3 -2/3)))
(test "#f" (doco '(<= 3 -17/4)))
(test "#t" (doco '(<= 3 3.00000000)))
(test "#t" (doco '(<= 3 5.50000000)))
(test "#f" (doco '(<= 3 -6.20000000)))
(test "#t" (doco '(<= -2 3)))
(test "#t" (doco '(<= -2 -2)))
(test "#t" (doco '(<= -2 5)))
(test "#f" (doco '(<= -2 -6)))
(test "#t" (doco '(<= -2 1/3)))
(test "#t" (doco '(<= -2 10/3)))
(test "#t" (doco '(<= -2 -2/3)))
(test "#f" (doco '(<= -2 -17/4)))
(test "#t" (doco '(<= -2 3.00000000)))
(test "#t" (doco '(<= -2 5.50000000)))
(test "#f" (doco '(<= -2 -6.20000000)))
(test "#f" (doco '(<= 5 3)))
(test "#f" (doco '(<= 5 -2)))
(test "#t" (doco '(<= 5 5)))
(test "#f" (doco '(<= 5 -6)))
(test "#f" (doco '(<= 5 1/3)))
(test "#f" (doco '(<= 5 10/3)))
(test "#f" (doco '(<= 5 -2/3)))
(test "#f" (doco '(<= 5 -17/4)))
(test "#f" (doco '(<= 5 3.00000000)))
(test "#t" (doco '(<= 5 5.50000000)))
(test "#f" (doco '(<= 5 -6.20000000)))
(test "#t" (doco '(<= -6 3)))
(test "#t" (doco '(<= -6 -2)))
(test "#t" (doco '(<= -6 5)))
(test "#t" (doco '(<= -6 -6)))
(test "#t" (doco '(<= -6 1/3)))
(test "#t" (doco '(<= -6 10/3)))
(test "#t" (doco '(<= -6 -2/3)))
(test "#t" (doco '(<= -6 -17/4)))
(test "#t" (doco '(<= -6 3.00000000)))
(test "#t" (doco '(<= -6 5.50000000)))
(test "#f" (doco '(<= -6 -6.20000000)))
(test "#t" (doco '(<= 1/3 3)))
(test "#f" (doco '(<= 1/3 -2)))
(test "#t" (doco '(<= 1/3 5)))
(test "#f" (doco '(<= 1/3 -6)))
(test "#t" (doco '(<= 1/3 1/3)))
(test "#t" (doco '(<= 1/3 10/3)))
(test "#f" (doco '(<= 1/3 -2/3)))
(test "#f" (doco '(<= 1/3 -17/4)))
(test "#t" (doco '(<= 1/3 3.00000000)))
(test "#t" (doco '(<= 1/3 5.50000000)))
(test "#f" (doco '(<= 1/3 -6.20000000)))
(test "#f" (doco '(<= 10/3 3)))
(test "#f" (doco '(<= 10/3 -2)))
(test "#t" (doco '(<= 10/3 5)))
(test "#f" (doco '(<= 10/3 -6)))
(test "#f" (doco '(<= 10/3 1/3)))
(test "#t" (doco '(<= 10/3 10/3)))
(test "#f" (doco '(<= 10/3 -2/3)))
(test "#f" (doco '(<= 10/3 -17/4)))
(test "#f" (doco '(<= 10/3 3.00000000)))
(test "#t" (doco '(<= 10/3 5.50000000)))
(test "#f" (doco '(<= 10/3 -6.20000000)))
(test "#t" (doco '(<= -2/3 3)))
(test "#f" (doco '(<= -2/3 -2)))
(test "#t" (doco '(<= -2/3 5)))
(test "#f" (doco '(<= -2/3 -6)))
(test "#t" (doco '(<= -2/3 1/3)))
(test "#t" (doco '(<= -2/3 10/3)))
(test "#t" (doco '(<= -2/3 -2/3)))
(test "#f" (doco '(<= -2/3 -17/4)))
(test "#t" (doco '(<= -2/3 3.00000000)))
(test "#t" (doco '(<= -2/3 5.50000000)))
(test "#f" (doco '(<= -2/3 -6.20000000)))
(test "#t" (doco '(<= -17/4 3)))
(test "#t" (doco '(<= -17/4 -2)))
(test "#t" (doco '(<= -17/4 5)))
(test "#f" (doco '(<= -17/4 -6)))
(test "#t" (doco '(<= -17/4 1/3)))
(test "#t" (doco '(<= -17/4 10/3)))
(test "#t" (doco '(<= -17/4 -2/3)))
(test "#t" (doco '(<= -17/4 -17/4)))
(test "#t" (doco '(<= -17/4 3.00000000)))
(test "#t" (doco '(<= -17/4 5.50000000)))
(test "#f" (doco '(<= -17/4 -6.20000000)))
(test "#t" (doco '(<= 3.00000000 3)))
(test "#f" (doco '(<= 3.00000000 -2)))
(test "#t" (doco '(<= 3.00000000 5)))
(test "#f" (doco '(<= 3.00000000 -6)))
(test "#f" (doco '(<= 3.00000000 1/3)))
(test "#t" (doco '(<= 3.00000000 10/3)))
(test "#f" (doco '(<= 3.00000000 -2/3)))
(test "#f" (doco '(<= 3.00000000 -17/4)))
(test "#t" (doco '(<= 3.00000000 3.00000000)))
(test "#t" (doco '(<= 3.00000000 5.50000000)))
(test "#f" (doco '(<= 3.00000000 -6.20000000)))
(test "#f" (doco '(<= 5.50000000 3)))
(test "#f" (doco '(<= 5.50000000 -2)))
(test "#f" (doco '(<= 5.50000000 5)))
(test "#f" (doco '(<= 5.50000000 -6)))
(test "#f" (doco '(<= 5.50000000 1/3)))
(test "#f" (doco '(<= 5.50000000 10/3)))
(test "#f" (doco '(<= 5.50000000 -2/3)))
(test "#f" (doco '(<= 5.50000000 -17/4)))
(test "#f" (doco '(<= 5.50000000 3.00000000)))
(test "#t" (doco '(<= 5.50000000 5.50000000)))
(test "#f" (doco '(<= 5.50000000 -6.20000000)))
(test "#t" (doco '(<= -6.20000000 3)))
(test "#t" (doco '(<= -6.20000000 -2)))
(test "#t" (doco '(<= -6.20000000 5)))
(test "#t" (doco '(<= -6.20000000 -6)))
(test "#t" (doco '(<= -6.20000000 1/3)))
(test "#t" (doco '(<= -6.20000000 10/3)))
(test "#t" (doco '(<= -6.20000000 -2/3)))
(test "#t" (doco '(<= -6.20000000 -17/4)))
(test "#t" (doco '(<= -6.20000000 3.00000000)))
(test "#t" (doco '(<= -6.20000000 5.50000000)))
(test "#t" (doco '(<= -6.20000000 -6.20000000)))
(test "#t" (doco '(= 3 3)))
(test "#f" (doco '(= 3 -2)))
(test "#f" (doco '(= 3 5)))
(test "#f" (doco '(= 3 -6)))
(test "#f" (doco '(= 3 1/3)))
(test "#f" (doco '(= 3 10/3)))
(test "#f" (doco '(= 3 -2/3)))
(test "#f" (doco '(= 3 -17/4)))
(test "#t" (doco '(= 3 3.00000000)))
(test "#f" (doco '(= 3 5.50000000)))
(test "#f" (doco '(= 3 -6.20000000)))
(test "#f" (doco '(= -2 3)))
(test "#t" (doco '(= -2 -2)))
(test "#f" (doco '(= -2 5)))
(test "#f" (doco '(= -2 -6)))
(test "#f" (doco '(= -2 1/3)))
(test "#f" (doco '(= -2 10/3)))
(test "#f" (doco '(= -2 -2/3)))
(test "#f" (doco '(= -2 -17/4)))
(test "#f" (doco '(= -2 3.00000000)))
(test "#f" (doco '(= -2 5.50000000)))
(test "#f" (doco '(= -2 -6.20000000)))
(test "#f" (doco '(= 5 3)))
(test "#f" (doco '(= 5 -2)))
(test "#t" (doco '(= 5 5)))
(test "#f" (doco '(= 5 -6)))
(test "#f" (doco '(= 5 1/3)))
(test "#f" (doco '(= 5 10/3)))
(test "#f" (doco '(= 5 -2/3)))
(test "#f" (doco '(= 5 -17/4)))
(test "#f" (doco '(= 5 3.00000000)))
(test "#f" (doco '(= 5 5.50000000)))
(test "#f" (doco '(= 5 -6.20000000)))
(test "#f" (doco '(= -6 3)))
(test "#f" (doco '(= -6 -2)))
(test "#f" (doco '(= -6 5)))
(test "#t" (doco '(= -6 -6)))
(test "#f" (doco '(= -6 1/3)))
(test "#f" (doco '(= -6 10/3)))
(test "#f" (doco '(= -6 -2/3)))
(test "#f" (doco '(= -6 -17/4)))
(test "#f" (doco '(= -6 3.00000000)))
(test "#f" (doco '(= -6 5.50000000)))
(test "#f" (doco '(= -6 -6.20000000)))
(test "#f" (doco '(= 1/3 3)))
(test "#f" (doco '(= 1/3 -2)))
(test "#f" (doco '(= 1/3 5)))
(test "#f" (doco '(= 1/3 -6)))
(test "#t" (doco '(= 1/3 1/3)))
(test "#f" (doco '(= 1/3 10/3)))
(test "#f" (doco '(= 1/3 -2/3)))
(test "#f" (doco '(= 1/3 -17/4)))
(test "#f" (doco '(= 1/3 3.00000000)))
(test "#f" (doco '(= 1/3 5.50000000)))
(test "#f" (doco '(= 1/3 -6.20000000)))
(test "#f" (doco '(= 10/3 3)))
(test "#f" (doco '(= 10/3 -2)))
(test "#f" (doco '(= 10/3 5)))
(test "#f" (doco '(= 10/3 -6)))
(test "#f" (doco '(= 10/3 1/3)))
(test "#t" (doco '(= 10/3 10/3)))
(test "#f" (doco '(= 10/3 -2/3)))
(test "#f" (doco '(= 10/3 -17/4)))
(test "#f" (doco '(= 10/3 3.00000000)))
(test "#f" (doco '(= 10/3 5.50000000)))
(test "#f" (doco '(= 10/3 -6.20000000)))
(test "#f" (doco '(= -2/3 3)))
(test "#f" (doco '(= -2/3 -2)))
(test "#f" (doco '(= -2/3 5)))
(test "#f" (doco '(= -2/3 -6)))
(test "#f" (doco '(= -2/3 1/3)))
(test "#f" (doco '(= -2/3 10/3)))
(test "#t" (doco '(= -2/3 -2/3)))
(test "#f" (doco '(= -2/3 -17/4)))
(test "#f" (doco '(= -2/3 3.00000000)))
(test "#f" (doco '(= -2/3 5.50000000)))
(test "#f" (doco '(= -2/3 -6.20000000)))
(test "#f" (doco '(= -17/4 3)))
(test "#f" (doco '(= -17/4 -2)))
(test "#f" (doco '(= -17/4 5)))
(test "#f" (doco '(= -17/4 -6)))
(test "#f" (doco '(= -17/4 1/3)))
(test "#f" (doco '(= -17/4 10/3)))
(test "#f" (doco '(= -17/4 -2/3)))
(test "#t" (doco '(= -17/4 -17/4)))
(test "#f" (doco '(= -17/4 3.00000000)))
(test "#f" (doco '(= -17/4 5.50000000)))
(test "#f" (doco '(= -17/4 -6.20000000)))
(test "#t" (doco '(= 3.00000000 3)))
(test "#f" (doco '(= 3.00000000 -2)))
(test "#f" (doco '(= 3.00000000 5)))
(test "#f" (doco '(= 3.00000000 -6)))
(test "#f" (doco '(= 3.00000000 1/3)))
(test "#f" (doco '(= 3.00000000 10/3)))
(test "#f" (doco '(= 3.00000000 -2/3)))
(test "#f" (doco '(= 3.00000000 -17/4)))
(test "#t" (doco '(= 3.00000000 3.00000000)))
(test "#f" (doco '(= 3.00000000 5.50000000)))
(test "#f" (doco '(= 3.00000000 -6.20000000)))
(test "#f" (doco '(= 5.50000000 3)))
(test "#f" (doco '(= 5.50000000 -2)))
(test "#f" (doco '(= 5.50000000 5)))
(test "#f" (doco '(= 5.50000000 -6)))
(test "#f" (doco '(= 5.50000000 1/3)))
(test "#f" (doco '(= 5.50000000 10/3)))
(test "#f" (doco '(= 5.50000000 -2/3)))
(test "#f" (doco '(= 5.50000000 -17/4)))
(test "#f" (doco '(= 5.50000000 3.00000000)))
(test "#t" (doco '(= 5.50000000 5.50000000)))
(test "#f" (doco '(= 5.50000000 -6.20000000)))
(test "#f" (doco '(= -6.20000000 3)))
(test "#f" (doco '(= -6.20000000 -2)))
(test "#f" (doco '(= -6.20000000 5)))
(test "#f" (doco '(= -6.20000000 -6)))
(test "#f" (doco '(= -6.20000000 1/3)))
(test "#f" (doco '(= -6.20000000 10/3)))
(test "#f" (doco '(= -6.20000000 -2/3)))
(test "#f" (doco '(= -6.20000000 -17/4)))
(test "#f" (doco '(= -6.20000000 3.00000000)))
(test "#f" (doco '(= -6.20000000 5.50000000)))
(test "#t" (doco '(= -6.20000000 -6.20000000)))
(test "#t" (doco '(>= 3 3)))
(test "#t" (doco '(>= 3 -2)))
(test "#f" (doco '(>= 3 5)))
(test "#t" (doco '(>= 3 -6)))
(test "#t" (doco '(>= 3 1/3)))
(test "#f" (doco '(>= 3 10/3)))
(test "#t" (doco '(>= 3 -2/3)))
(test "#t" (doco '(>= 3 -17/4)))
(test "#t" (doco '(>= 3 3.00000000)))
(test "#f" (doco '(>= 3 5.50000000)))
(test "#t" (doco '(>= 3 -6.20000000)))
(test "#f" (doco '(>= -2 3)))
(test "#t" (doco '(>= -2 -2)))
(test "#f" (doco '(>= -2 5)))
(test "#t" (doco '(>= -2 -6)))
(test "#f" (doco '(>= -2 1/3)))
(test "#f" (doco '(>= -2 10/3)))
(test "#f" (doco '(>= -2 -2/3)))
(test "#t" (doco '(>= -2 -17/4)))
(test "#f" (doco '(>= -2 3.00000000)))
(test "#f" (doco '(>= -2 5.50000000)))
(test "#t" (doco '(>= -2 -6.20000000)))
(test "#t" (doco '(>= 5 3)))
(test "#t" (doco '(>= 5 -2)))
(test "#t" (doco '(>= 5 5)))
(test "#t" (doco '(>= 5 -6)))
(test "#t" (doco '(>= 5 1/3)))
(test "#t" (doco '(>= 5 10/3)))
(test "#t" (doco '(>= 5 -2/3)))
(test "#t" (doco '(>= 5 -17/4)))
(test "#t" (doco '(>= 5 3.00000000)))
(test "#f" (doco '(>= 5 5.50000000)))
(test "#t" (doco '(>= 5 -6.20000000)))
(test "#f" (doco '(>= -6 3)))
(test "#f" (doco '(>= -6 -2)))
(test "#f" (doco '(>= -6 5)))
(test "#t" (doco '(>= -6 -6)))
(test "#f" (doco '(>= -6 1/3)))
(test "#f" (doco '(>= -6 10/3)))
(test "#f" (doco '(>= -6 -2/3)))
(test "#f" (doco '(>= -6 -17/4)))
(test "#f" (doco '(>= -6 3.00000000)))
(test "#f" (doco '(>= -6 5.50000000)))
(test "#t" (doco '(>= -6 -6.20000000)))
(test "#f" (doco '(>= 1/3 3)))
(test "#t" (doco '(>= 1/3 -2)))
(test "#f" (doco '(>= 1/3 5)))
(test "#t" (doco '(>= 1/3 -6)))
(test "#t" (doco '(>= 1/3 1/3)))
(test "#f" (doco '(>= 1/3 10/3)))
(test "#t" (doco '(>= 1/3 -2/3)))
(test "#t" (doco '(>= 1/3 -17/4)))
(test "#f" (doco '(>= 1/3 3.00000000)))
(test "#f" (doco '(>= 1/3 5.50000000)))
(test "#t" (doco '(>= 1/3 -6.20000000)))
(test "#t" (doco '(>= 10/3 3)))
(test "#t" (doco '(>= 10/3 -2)))
(test "#f" (doco '(>= 10/3 5)))
(test "#t" (doco '(>= 10/3 -6)))
(test "#t" (doco '(>= 10/3 1/3)))
(test "#t" (doco '(>= 10/3 10/3)))
(test "#t" (doco '(>= 10/3 -2/3)))
(test "#t" (doco '(>= 10/3 -17/4)))
(test "#t" (doco '(>= 10/3 3.00000000)))
(test "#f" (doco '(>= 10/3 5.50000000)))
(test "#t" (doco '(>= 10/3 -6.20000000)))
(test "#f" (doco '(>= -2/3 3)))
(test "#t" (doco '(>= -2/3 -2)))
(test "#f" (doco '(>= -2/3 5)))
(test "#t" (doco '(>= -2/3 -6)))
(test "#f" (doco '(>= -2/3 1/3)))
(test "#f" (doco '(>= -2/3 10/3)))
(test "#t" (doco '(>= -2/3 -2/3)))
(test "#t" (doco '(>= -2/3 -17/4)))
(test "#f" (doco '(>= -2/3 3.00000000)))
(test "#f" (doco '(>= -2/3 5.50000000)))
(test "#t" (doco '(>= -2/3 -6.20000000)))
(test "#f" (doco '(>= -17/4 3)))
(test "#f" (doco '(>= -17/4 -2)))
(test "#f" (doco '(>= -17/4 5)))
(test "#t" (doco '(>= -17/4 -6)))
(test "#f" (doco '(>= -17/4 1/3)))
(test "#f" (doco '(>= -17/4 10/3)))
(test "#f" (doco '(>= -17/4 -2/3)))
(test "#t" (doco '(>= -17/4 -17/4)))
(test "#f" (doco '(>= -17/4 3.00000000)))
(test "#f" (doco '(>= -17/4 5.50000000)))
(test "#t" (doco '(>= -17/4 -6.20000000)))
(test "#t" (doco '(>= 3.00000000 3)))
(test "#t" (doco '(>= 3.00000000 -2)))
(test "#f" (doco '(>= 3.00000000 5)))
(test "#t" (doco '(>= 3.00000000 -6)))
(test "#t" (doco '(>= 3.00000000 1/3)))
(test "#f" (doco '(>= 3.00000000 10/3)))
(test "#t" (doco '(>= 3.00000000 -2/3)))
(test "#t" (doco '(>= 3.00000000 -17/4)))
(test "#t" (doco '(>= 3.00000000 3.00000000)))
(test "#f" (doco '(>= 3.00000000 5.50000000)))
(test "#t" (doco '(>= 3.00000000 -6.20000000)))
(test "#t" (doco '(>= 5.50000000 3)))
(test "#t" (doco '(>= 5.50000000 -2)))
(test "#t" (doco '(>= 5.50000000 5)))
(test "#t" (doco '(>= 5.50000000 -6)))
(test "#t" (doco '(>= 5.50000000 1/3)))
(test "#t" (doco '(>= 5.50000000 10/3)))
(test "#t" (doco '(>= 5.50000000 -2/3)))
(test "#t" (doco '(>= 5.50000000 -17/4)))
(test "#t" (doco '(>= 5.50000000 3.00000000)))
(test "#t" (doco '(>= 5.50000000 5.50000000)))
(test "#t" (doco '(>= 5.50000000 -6.20000000)))
(test "#f" (doco '(>= -6.20000000 3)))
(test "#f" (doco '(>= -6.20000000 -2)))
(test "#f" (doco '(>= -6.20000000 5)))
(test "#f" (doco '(>= -6.20000000 -6)))
(test "#f" (doco '(>= -6.20000000 1/3)))
(test "#f" (doco '(>= -6.20000000 10/3)))
(test "#f" (doco '(>= -6.20000000 -2/3)))
(test "#f" (doco '(>= -6.20000000 -17/4)))
(test "#f" (doco '(>= -6.20000000 3.00000000)))
(test "#f" (doco '(>= -6.20000000 5.50000000)))
(test "#t" (doco '(>= -6.20000000 -6.20000000)))
(test "#f" (doco '(> 3 3)))
(test "#t" (doco '(> 3 -2)))
(test "#f" (doco '(> 3 5)))
(test "#t" (doco '(> 3 -6)))
(test "#t" (doco '(> 3 1/3)))
(test "#f" (doco '(> 3 10/3)))
(test "#t" (doco '(> 3 -2/3)))
(test "#t" (doco '(> 3 -17/4)))
(test "#f" (doco '(> 3 3.00000000)))
(test "#f" (doco '(> 3 5.50000000)))
(test "#t" (doco '(> 3 -6.20000000)))
(test "#f" (doco '(> -2 3)))
(test "#f" (doco '(> -2 -2)))
(test "#f" (doco '(> -2 5)))
(test "#t" (doco '(> -2 -6)))
(test "#f" (doco '(> -2 1/3)))
(test "#f" (doco '(> -2 10/3)))
(test "#f" (doco '(> -2 -2/3)))
(test "#t" (doco '(> -2 -17/4)))
(test "#f" (doco '(> -2 3.00000000)))
(test "#f" (doco '(> -2 5.50000000)))
(test "#t" (doco '(> -2 -6.20000000)))
(test "#t" (doco '(> 5 3)))
(test "#t" (doco '(> 5 -2)))
(test "#f" (doco '(> 5 5)))
(test "#t" (doco '(> 5 -6)))
(test "#t" (doco '(> 5 1/3)))
(test "#t" (doco '(> 5 10/3)))
(test "#t" (doco '(> 5 -2/3)))
(test "#t" (doco '(> 5 -17/4)))
(test "#t" (doco '(> 5 3.00000000)))
(test "#f" (doco '(> 5 5.50000000)))
(test "#t" (doco '(> 5 -6.20000000)))
(test "#f" (doco '(> -6 3)))
(test "#f" (doco '(> -6 -2)))
(test "#f" (doco '(> -6 5)))
(test "#f" (doco '(> -6 -6)))
(test "#f" (doco '(> -6 1/3)))
(test "#f" (doco '(> -6 10/3)))
(test "#f" (doco '(> -6 -2/3)))
(test "#f" (doco '(> -6 -17/4)))
(test "#f" (doco '(> -6 3.00000000)))
(test "#f" (doco '(> -6 5.50000000)))
(test "#t" (doco '(> -6 -6.20000000)))
(test "#f" (doco '(> 1/3 3)))
(test "#t" (doco '(> 1/3 -2)))
(test "#f" (doco '(> 1/3 5)))
(test "#t" (doco '(> 1/3 -6)))
(test "#f" (doco '(> 1/3 1/3)))
(test "#f" (doco '(> 1/3 10/3)))
(test "#t" (doco '(> 1/3 -2/3)))
(test "#t" (doco '(> 1/3 -17/4)))
(test "#f" (doco '(> 1/3 3.00000000)))
(test "#f" (doco '(> 1/3 5.50000000)))
(test "#t" (doco '(> 1/3 -6.20000000)))
(test "#t" (doco '(> 10/3 3)))
(test "#t" (doco '(> 10/3 -2)))
(test "#f" (doco '(> 10/3 5)))
(test "#t" (doco '(> 10/3 -6)))
(test "#t" (doco '(> 10/3 1/3)))
(test "#f" (doco '(> 10/3 10/3)))
(test "#t" (doco '(> 10/3 -2/3)))
(test "#t" (doco '(> 10/3 -17/4)))
(test "#t" (doco '(> 10/3 3.00000000)))
(test "#f" (doco '(> 10/3 5.50000000)))
(test "#t" (doco '(> 10/3 -6.20000000)))
(test "#f" (doco '(> -2/3 3)))
(test "#t" (doco '(> -2/3 -2)))
(test "#f" (doco '(> -2/3 5)))
(test "#t" (doco '(> -2/3 -6)))
(test "#f" (doco '(> -2/3 1/3)))
(test "#f" (doco '(> -2/3 10/3)))
(test "#f" (doco '(> -2/3 -2/3)))
(test "#t" (doco '(> -2/3 -17/4)))
(test "#f" (doco '(> -2/3 3.00000000)))
(test "#f" (doco '(> -2/3 5.50000000)))
(test "#t" (doco '(> -2/3 -6.20000000)))
(test "#f" (doco '(> -17/4 3)))
(test "#f" (doco '(> -17/4 -2)))
(test "#f" (doco '(> -17/4 5)))
(test "#t" (doco '(> -17/4 -6)))
(test "#f" (doco '(> -17/4 1/3)))
(test "#f" (doco '(> -17/4 10/3)))
(test "#f" (doco '(> -17/4 -2/3)))
(test "#f" (doco '(> -17/4 -17/4)))
(test "#f" (doco '(> -17/4 3.00000000)))
(test "#f" (doco '(> -17/4 5.50000000)))
(test "#t" (doco '(> -17/4 -6.20000000)))
(test "#f" (doco '(> 3.00000000 3)))
(test "#t" (doco '(> 3.00000000 -2)))
(test "#f" (doco '(> 3.00000000 5)))
(test "#t" (doco '(> 3.00000000 -6)))
(test "#t" (doco '(> 3.00000000 1/3)))
(test "#f" (doco '(> 3.00000000 10/3)))
(test "#t" (doco '(> 3.00000000 -2/3)))
(test "#t" (doco '(> 3.00000000 -17/4)))
(test "#f" (doco '(> 3.00000000 3.00000000)))
(test "#f" (doco '(> 3.00000000 5.50000000)))
(test "#t" (doco '(> 3.00000000 -6.20000000)))
(test "#t" (doco '(> 5.50000000 3)))
(test "#t" (doco '(> 5.50000000 -2)))
(test "#t" (doco '(> 5.50000000 5)))
(test "#t" (doco '(> 5.50000000 -6)))
(test "#t" (doco '(> 5.50000000 1/3)))
(test "#t" (doco '(> 5.50000000 10/3)))
(test "#t" (doco '(> 5.50000000 -2/3)))
(test "#t" (doco '(> 5.50000000 -17/4)))
(test "#t" (doco '(> 5.50000000 3.00000000)))
(test "#f" (doco '(> 5.50000000 5.50000000)))
(test "#t" (doco '(> 5.50000000 -6.20000000)))
(test "#f" (doco '(> -6.20000000 3)))
(test "#f" (doco '(> -6.20000000 -2)))
(test "#f" (doco '(> -6.20000000 5)))
(test "#f" (doco '(> -6.20000000 -6)))
(test "#f" (doco '(> -6.20000000 1/3)))
(test "#f" (doco '(> -6.20000000 10/3)))
(test "#f" (doco '(> -6.20000000 -2/3)))
(test "#f" (doco '(> -6.20000000 -17/4)))
(test "#f" (doco '(> -6.20000000 3.00000000)))
(test "#f" (doco '(> -6.20000000 5.50000000)))
(test "#f" (doco '(> -6.20000000 -6.20000000)))
(test "#f" (doco '(/= 3 3)))
(test "#t" (doco '(/= 3 -2)))
(test "#t" (doco '(/= 3 5)))
(test "#t" (doco '(/= 3 -6)))
(test "#t" (doco '(/= 3 1/3)))
(test "#t" (doco '(/= 3 10/3)))
(test "#t" (doco '(/= 3 -2/3)))
(test "#t" (doco '(/= 3 -17/4)))
(test "#f" (doco '(/= 3 3.00000000)))
(test "#t" (doco '(/= 3 5.50000000)))
(test "#t" (doco '(/= 3 -6.20000000)))
(test "#t" (doco '(/= -2 3)))
(test "#f" (doco '(/= -2 -2)))
(test "#t" (doco '(/= -2 5)))
(test "#t" (doco '(/= -2 -6)))
(test "#t" (doco '(/= -2 1/3)))
(test "#t" (doco '(/= -2 10/3)))
(test "#t" (doco '(/= -2 -2/3)))
(test "#t" (doco '(/= -2 -17/4)))
(test "#t" (doco '(/= -2 3.00000000)))
(test "#t" (doco '(/= -2 5.50000000)))
(test "#t" (doco '(/= -2 -6.20000000)))
(test "#t" (doco '(/= 5 3)))
(test "#t" (doco '(/= 5 -2)))
(test "#f" (doco '(/= 5 5)))
(test "#t" (doco '(/= 5 -6)))
(test "#t" (doco '(/= 5 1/3)))
(test "#t" (doco '(/= 5 10/3)))
(test "#t" (doco '(/= 5 -2/3)))
(test "#t" (doco '(/= 5 -17/4)))
(test "#t" (doco '(/= 5 3.00000000)))
(test "#t" (doco '(/= 5 5.50000000)))
(test "#t" (doco '(/= 5 -6.20000000)))
(test "#t" (doco '(/= -6 3)))
(test "#t" (doco '(/= -6 -2)))
(test "#t" (doco '(/= -6 5)))
(test "#f" (doco '(/= -6 -6)))
(test "#t" (doco '(/= -6 1/3)))
(test "#t" (doco '(/= -6 10/3)))
(test "#t" (doco '(/= -6 -2/3)))
(test "#t" (doco '(/= -6 -17/4)))
(test "#t" (doco '(/= -6 3.00000000)))
(test "#t" (doco '(/= -6 5.50000000)))
(test "#t" (doco '(/= -6 -6.20000000)))
(test "#t" (doco '(/= 1/3 3)))
(test "#t" (doco '(/= 1/3 -2)))
(test "#t" (doco '(/= 1/3 5)))
(test "#t" (doco '(/= 1/3 -6)))
(test "#f" (doco '(/= 1/3 1/3)))
(test "#t" (doco '(/= 1/3 10/3)))
(test "#t" (doco '(/= 1/3 -2/3)))
(test "#t" (doco '(/= 1/3 -17/4)))
(test "#t" (doco '(/= 1/3 3.00000000)))
(test "#t" (doco '(/= 1/3 5.50000000)))
(test "#t" (doco '(/= 1/3 -6.20000000)))
(test "#t" (doco '(/= 10/3 3)))
(test "#t" (doco '(/= 10/3 -2)))
(test "#t" (doco '(/= 10/3 5)))
(test "#t" (doco '(/= 10/3 -6)))
(test "#t" (doco '(/= 10/3 1/3)))
(test "#f" (doco '(/= 10/3 10/3)))
(test "#t" (doco '(/= 10/3 -2/3)))
(test "#t" (doco '(/= 10/3 -17/4)))
(test "#t" (doco '(/= 10/3 3.00000000)))
(test "#t" (doco '(/= 10/3 5.50000000)))
(test "#t" (doco '(/= 10/3 -6.20000000)))
(test "#t" (doco '(/= -2/3 3)))
(test "#t" (doco '(/= -2/3 -2)))
(test "#t" (doco '(/= -2/3 5)))
(test "#t" (doco '(/= -2/3 -6)))
(test "#t" (doco '(/= -2/3 1/3)))
(test "#t" (doco '(/= -2/3 10/3)))
(test "#f" (doco '(/= -2/3 -2/3)))
(test "#t" (doco '(/= -2/3 -17/4)))
(test "#t" (doco '(/= -2/3 3.00000000)))
(test "#t" (doco '(/= -2/3 5.50000000)))
(test "#t" (doco '(/= -2/3 -6.20000000)))
(test "#t" (doco '(/= -17/4 3)))
(test "#t" (doco '(/= -17/4 -2)))
(test "#t" (doco '(/= -17/4 5)))
(test "#t" (doco '(/= -17/4 -6)))
(test "#t" (doco '(/= -17/4 1/3)))
(test "#t" (doco '(/= -17/4 10/3)))
(test "#t" (doco '(/= -17/4 -2/3)))
(test "#f" (doco '(/= -17/4 -17/4)))
(test "#t" (doco '(/= -17/4 3.00000000)))
(test "#t" (doco '(/= -17/4 5.50000000)))
(test "#t" (doco '(/= -17/4 -6.20000000)))
(test "#f" (doco '(/= 3.00000000 3)))
(test "#t" (doco '(/= 3.00000000 -2)))
(test "#t" (doco '(/= 3.00000000 5)))
(test "#t" (doco '(/= 3.00000000 -6)))
(test "#t" (doco '(/= 3.00000000 1/3)))
(test "#t" (doco '(/= 3.00000000 10/3)))
(test "#t" (doco '(/= 3.00000000 -2/3)))
(test "#t" (doco '(/= 3.00000000 -17/4)))
(test "#f" (doco '(/= 3.00000000 3.00000000)))
(test "#t" (doco '(/= 3.00000000 5.50000000)))
(test "#t" (doco '(/= 3.00000000 -6.20000000)))
(test "#t" (doco '(/= 5.50000000 3)))
(test "#t" (doco '(/= 5.50000000 -2)))
(test "#t" (doco '(/= 5.50000000 5)))
(test "#t" (doco '(/= 5.50000000 -6)))
(test "#t" (doco '(/= 5.50000000 1/3)))
(test "#t" (doco '(/= 5.50000000 10/3)))
(test "#t" (doco '(/= 5.50000000 -2/3)))
(test "#t" (doco '(/= 5.50000000 -17/4)))
(test "#t" (doco '(/= 5.50000000 3.00000000)))
(test "#f" (doco '(/= 5.50000000 5.50000000)))
(test "#t" (doco '(/= 5.50000000 -6.20000000)))
(test "#t" (doco '(/= -6.20000000 3)))
(test "#t" (doco '(/= -6.20000000 -2)))
(test "#t" (doco '(/= -6.20000000 5)))
(test "#t" (doco '(/= -6.20000000 -6)))
(test "#t" (doco '(/= -6.20000000 1/3)))
(test "#t" (doco '(/= -6.20000000 10/3)))
(test "#t" (doco '(/= -6.20000000 -2/3)))
(test "#t" (doco '(/= -6.20000000 -17/4)))
(test "#t" (doco '(/= -6.20000000 3.00000000)))
(test "#t" (doco '(/= -6.20000000 5.50000000)))
(test "#f" (doco '(/= -6.20000000 -6.20000000)))

(test  "#f" (doco '(< 3 (make-rational 9 3))))

(test  "#t" (doco '(char<? #\3 #\5)))
(test  "#f" (doco '(char<? #\5 #\3)))
(test  "#f" (doco '(char<? #\3 #\3)))
(test  "#t" (doco '(char<=? #\3 #\5)))
(test  "#f" (doco '(char<=? #\5 #\3)))
(test  "#t" (doco '(char<=? #\3 #\3)))
(test  "#f" (doco '(char=? #\3 #\5)))
(test  "#f" (doco '(char=? #\5 #\3)))
(test  "#t" (doco '(char=? #\3 #\3)))
(test  "#f" (doco '(char>=? #\3 #\5)))
(test  "#t" (doco '(char>=? #\5 #\3)))
(test  "#t" (doco '(char>=? #\3 #\3)))
(test  "#f" (doco '(char>? #\3 #\5)))
(test  "#t" (doco '(char>? #\5 #\3)))
(test  "#f" (doco '(char>? #\3 #\3)))
(test  "#t" (doco '(char/=? #\3 #\5)))
(test  "#t" (doco '(char/=? #\5 #\3)))
(test  "#f" (doco '(char/=? #\3 #\3)))

(test  "#t" (doco '(char-ci<? #\A #\G)))
(test  "#f" (doco '(char-ci<? #\G #\A)))
(test  "#f" (doco '(char-ci<? #\A #\A)))
(test  "#t" (doco '(char-ci<=? #\A #\G)))
(test  "#f" (doco '(char-ci<=? #\G #\A)))
(test  "#t" (doco '(char-ci<=? #\A #\A)))
(test  "#f" (doco '(char-ci=? #\A #\G)))
(test  "#f" (doco '(char-ci=? #\G #\A)))
(test  "#t" (doco '(char-ci=? #\A #\A)))
(test  "#f" (doco '(char-ci>=? #\A #\G)))
(test  "#t" (doco '(char-ci>=? #\G #\A)))
(test  "#t" (doco '(char-ci>=? #\A #\A)))
(test  "#f" (doco '(char-ci>? #\A #\G)))
(test  "#t" (doco '(char-ci>? #\G #\A)))
(test  "#f" (doco '(char-ci>? #\A #\A)))
(test  "#t" (doco '(char-ci/=? #\A #\G)))
(test  "#t" (doco '(char-ci/=? #\G #\A)))
(test  "#f" (doco '(char-ci/=? #\A #\A)))

(test  "#f" (doco '(char<? #\a #\G)))
(test  "#f" (doco '(char<? #\g #\A)))
(test  "#f" (doco '(char<? #\a #\A)))
(test  "#f" (doco '(char<=? #\a #\G)))
(test  "#f" (doco '(char<=? #\g #\A)))
(test  "#f" (doco '(char<=? #\a #\A)))
(test  "#f" (doco '(char=? #\a #\G)))
(test  "#f" (doco '(char=? #\g #\A)))
(test  "#f" (doco '(char=? #\a #\A)))
(test  "#t" (doco '(char>=? #\a #\G)))
(test  "#t" (doco '(char>=? #\g #\A)))
(test  "#t" (doco '(char>=? #\a #\A)))
(test  "#t" (doco '(char>? #\a #\G)))
(test  "#t" (doco '(char>? #\g #\A)))
(test  "#t" (doco '(char>? #\a #\A)))
(test  "#t" (doco '(char/=? #\a #\G)))
(test  "#t" (doco '(char/=? #\g #\A)))
(test  "#t" (doco '(char/=? #\a #\A)))

(test  "#t" (doco '(char-ci<? #\a #\G)))
(test  "#f" (doco '(char-ci<? #\g #\A)))
(test  "#f" (doco '(char-ci<? #\a #\A)))
(test  "#t" (doco '(char-ci<=? #\a #\G)))
(test  "#f" (doco '(char-ci<=? #\g #\A)))
(test  "#t" (doco '(char-ci<=? #\a #\A)))
(test  "#f" (doco '(char-ci=? #\a #\G)))
(test  "#f" (doco '(char-ci=? #\g #\A)))
(test  "#t" (doco '(char-ci=? #\a #\A)))
(test  "#f" (doco '(char-ci>=? #\a #\G)))
(test  "#t" (doco '(char-ci>=? #\g #\A)))
(test  "#t" (doco '(char-ci>=? #\a #\A)))
(test  "#f" (doco '(char-ci>? #\a #\G)))
(test  "#t" (doco '(char-ci>? #\g #\A)))
(test  "#f" (doco '(char-ci>? #\a #\A)))
(test  "#t" (doco '(char-ci/=? #\a #\G)))
(test  "#t" (doco '(char-ci/=? #\g #\A)))
(test  "#f" (doco '(char-ci/=? #\a #\A)))

(test  "#t" (doco '(string<? "3" "5")))
(test  "#f" (doco '(string<? "5" "3")))
(test  "#f" (doco '(string<? "3" "3")))
(test  "#t" (doco '(string<=? "3" "5")))
(test  "#f" (doco '(string<=? "5" "3")))
(test  "#t" (doco '(string<=? "3" "3")))
(test  "#f" (doco '(string=? "3" "5")))
(test  "#f" (doco '(string=? "5" "3")))
(test  "#t" (doco '(string=? "3" "3")))
(test  "#f" (doco '(string>=? "3" "5")))
(test  "#t" (doco '(string>=? "5" "3")))
(test  "#t" (doco '(string>=? "3" "3")))
(test  "#f" (doco '(string>? "3" "5")))
(test  "#t" (doco '(string>? "5" "3")))
(test  "#f" (doco '(string>? "3" "3")))
(test  "#t" (doco '(string/=? "3" "5")))
(test  "#t" (doco '(string/=? "5" "3")))
(test  "#f" (doco '(string/=? "3" "3")))

(test  "#t" (doco '(string-ci<? "A" "G")))
(test  "#f" (doco '(string-ci<? "G" "A")))
(test  "#f" (doco '(string-ci<? "A" "A")))
(test  "#t" (doco '(string-ci<=? "A" "G")))
(test  "#f" (doco '(string-ci<=? "G" "A")))
(test  "#t" (doco '(string-ci<=? "A" "A")))
(test  "#f" (doco '(string-ci=? "A" "G")))
(test  "#f" (doco '(string-ci=? "G" "A")))
(test  "#t" (doco '(string-ci=? "A" "A")))
(test  "#f" (doco '(string-ci>=? "A" "G")))
(test  "#t" (doco '(string-ci>=? "G" "A")))
(test  "#t" (doco '(string-ci>=? "A" "A")))
(test  "#f" (doco '(string-ci>? "A" "G")))
(test  "#t" (doco '(string-ci>? "G" "A")))
(test  "#f" (doco '(string-ci>? "A" "A")))
(test  "#t" (doco '(string-ci/=? "A" "G")))
(test  "#t" (doco '(string-ci/=? "G" "A")))
(test  "#f" (doco '(string-ci/=? "A" "A")))

(test  "#f" (doco '(string<? "a" "G")))
(test  "#f" (doco '(string<? "g" "A")))
(test  "#f" (doco '(string<? "a" "A")))
(test  "#f" (doco '(string<=? "a" "G")))
(test  "#f" (doco '(string<=? "g" "A")))
(test  "#f" (doco '(string<=? "a" "A")))
(test  "#f" (doco '(string=? "a" "G")))
(test  "#f" (doco '(string=? "g" "A")))
(test  "#f" (doco '(string=? "a" "A")))
(test  "#t" (doco '(string>=? "a" "G")))
(test  "#t" (doco '(string>=? "g" "A")))
(test  "#t" (doco '(string>=? "a" "A")))
(test  "#t" (doco '(string>? "a" "G")))
(test  "#t" (doco '(string>? "g" "A")))
(test  "#t" (doco '(string>? "a" "A")))
(test  "#t" (doco '(string/=? "a" "G")))
(test  "#t" (doco '(string/=? "g" "A")))
(test  "#t" (doco '(string/=? "a" "A")))

(test  "#t" (doco '(string-ci<? "a" "G")))
(test  "#f" (doco '(string-ci<? "g" "A")))
(test  "#f" (doco '(string-ci<? "a" "A")))
(test  "#t" (doco '(string-ci<=? "a" "G")))
(test  "#f" (doco '(string-ci<=? "g" "A")))
(test  "#t" (doco '(string-ci<=? "a" "A")))
(test  "#f" (doco '(string-ci=? "a" "G")))
(test  "#f" (doco '(string-ci=? "g" "A")))
(test  "#t" (doco '(string-ci=? "a" "A")))
(test  "#f" (doco '(string-ci>=? "a" "G")))
(test  "#t" (doco '(string-ci>=? "g" "A")))
(test  "#t" (doco '(string-ci>=? "a" "A")))
(test  "#f" (doco '(string-ci>? "a" "G")))
(test  "#t" (doco '(string-ci>? "g" "A")))
(test  "#f" (doco '(string-ci>? "a" "A")))
(test  "#t" (doco '(string-ci/=? "a" "G")))
(test  "#t" (doco '(string-ci/=? "g" "A")))
(test  "#f" (doco '(string-ci/=? "a" "A")))

(test "#t" (doco '(char-alphabetic? #\A)))
(test "#f" (doco '(char-alphabetic? #\3)))
(test "#f" (doco '(char-alphabetic? #\?)))
(test "#t" (doco '(char-alphanumeric? #\A)))
(test "#t" (doco '(char-alphanumeric? #\3)))
(test "#f" (doco '(char-alphanumeric? #\?)))

(test "#f" (doco '(char-numeric? #\A)))
(test "#t" (doco '(char-numeric? #\3)))
(test "#f" (doco '(char-numeric? #\?)))

(test "#f" (doco '(char-oct-digit? #\A)))
(test "#f" (doco '(char-oct-digit? #\?)))
(test "#t" (doco '(char-oct-digit? #\6)))
(test "#f" (doco '(char-oct-digit? #\8)))

(test "#t" (doco '(char-hex-digit? #\A)))
(test "#t" (doco '(char-hex-digit? #\a)))
(test "#f" (doco '(char-hex-digit? #\?)))
(test "#f" (doco '(char-hex-digit? #\G)))
(test "#t" (doco '(char-hex-digit? #\6)))
(test "#t" (doco '(char-hex-digit? #\8)))

(test "#t" (doco '(char-whitespace? #\space)))
(test "#t" (doco '(char-whitespace? #\tab)))
(test "#f" (doco '(char-whitespace? #\A)))
(test "#f" (doco '(char-whitespace? #\?)))

(test "#f" (doco '(char-lowercase? #\?)))
(test "#f" (doco '(char-lowercase? #\A)))
(test "#t" (doco '(char-lowercase? #\g)))

(test "#f" (doco '(char-uppercase? #\?)))
(test "#t" (doco '(char-uppercase? #\A)))
(test "#f" (doco '(char-uppercase? #\g)))

(test "#t" (doco '(char-printable? #\?)))
(test "#t" (doco '(char-printable? #\A)))
(test "#t" (doco '(char-printable? #\g)))
(test "#f" (doco '(char-printable? #\X11)))

(test "#f" (doco '(char-control? #\?)))
(test "#f" (doco '(char-control? #\A)))
(test "#f" (doco '(char-control? #\g)))
(test "#t" (doco '(char-control? #\X11)))

(test "#f" (doco '(char-lower-case? #\?)))
(test "#f" (doco '(char-lower-case? #\A)))
(test "#t" (doco '(char-lower-case? #\g)))
(test "#f" (doco '(char-lower-case? #\X11)))

(test "#f" (doco '(char-upper-case? #\?)))
(test "#t" (doco '(char-upper-case? #\A)))
(test "#f" (doco '(char-upper-case? #\g)))
(test "#f" (doco '(char-upper-case? #\X11)))

(test "#\\g" (doco '(char-downcase #\G)))
(test "#\\g" (doco '(char-downcase #\g)))
(test "#\\!" (doco '(char-downcase #\!)))
(test "#\\G" (doco '(char-upcase #\G)))
(test "#\\G" (doco '(char-upcase #\g)))
(test "#\\!" (doco '(char-upcase #\!)))

(test "\"g\"" (doco '(string-downcase "G")))
(test "\"g\"" (doco '(string-downcase "g")))
(test "\"!\"" (doco '(string-downcase "!")))
(test "\"G\"" (doco '(string-upcase "G")))
(test "\"G\"" (doco '(string-upcase "g")))
(test "\"!\"" (doco '(string-upcase "!")))

(test "65" (doco '(char->integer #\A)))
(test "#\\A" (doco '(integer->char 65)))
(test "\"iamasymbol\"" (doco '(symbol->string 'iamasymbol)))
(test "#t" (doco '(symbol=? 'a 'a)))
(test "#f" (doco '(symbol=? 'a 'b)))
(test "iamastring" (doco '(string->symbol "iamastring")))

;;; TODO: think about whether floor and ceiling return exact or inexact
(test "3.000000000000000e+00" (doco '(floor 3.5)))
(test "-4.000000000000000e+00" (doco '(floor -3.5)))
(test "4.000000000000000e+00" (doco '(ceiling 3.5)))
(test "-3.000000000000000e+00" (doco '(ceiling -3.5)))

(test "3" (doco '(truncate 3.5)))
(test "-3" (doco '(truncate -3.5)))
(test "3.000000000000000e+00" (doco '(round 3.3)))
(test "4.000000000000000e+00" (doco '(round 3.5)))
(test "4.000000000000000e+00" (doco '(round 3.7)))
(test "-3.000000000000000e+00" (doco '(round -3.3)))
(test "-3.000000000000000e+00" (doco '(round -3.5)))
(test "-4.000000000000000e+00" (doco '(round -3.7)))

(test "1.732050807568877e+00" (doco '(sqrt 3)))
(test "1.414213562373095e+00i" (doco '(sqrt -2)))
(test "5.773502691896258e-01" (doco '(sqrt 1/3)))
(test "8.164965809277260e-01i" (doco '(sqrt -2/3)))
(test "1.732050807568877e+00" (doco '(sqrt 3.0)))
(test "2.489979919597746e+00i" (doco '(sqrt -6.2)))
(test "1.834954959857933e+00+4.087293783265759e-01i"
      (doco '(sqrt (cmplx 3.2 1.5))))

(test "3.000000000000000e+00" (doco '(cbrt 27.0)))
(test "-3.000000000000000e+00" (doco '(cbrt -27.0)))
;;; for some unknown reason, this barfs when it's turned on
;;; with all the others; if run in sub-groups, it's fine...
;;; something is wrong in skeem lexer or parser
;;; (test "2.598076211353316e+00-1.500000000000000e+00i"
;;;       (doco '(cbrt (cmplx 0 -27))))

(test "3.311545195869231e+01" (doco '(exp 3.5)))
(test "3.500000000000000e+00" (doco '(log 3.311545195869231e+01)))
(test "3.500000000000000e+00+3.141592653589793e+00i"
      (doco '(log -3.311545195869231e+01)))

(test "9.092974268256817e-01" (doco '(sin 2.0)))
(test "-4.161468365471424e-01" (doco '(cos 2.0)))
(test "-2.185039863261519e+00" (doco '(tan 2.0)))

(test "1.141592653589793e+00" (doco '(asin 9.092974268256817e-01)))
(test "2.000000000000000e+00" (doco '(acos -4.161468365471424e-01)))
(test "-1.141592653589793e+00" (doco '(atan -2.185039863261519e+00)))

(test "3.626860407847019e+00" (doco '(sinh 2.0)))
(test "3.762195691083631e+00" (doco '(cosh 2.0)))
(test "9.640275800758169e-01" (doco '(tanh 2.0)))

(test "2.000000000000000e+00" (doco '(asinh 3.626860407847019e+00)))
(test "2.000000000000000e+00" (doco '(acosh 3.762195691083631e+00)))
(test "2.000000000000000e+00" (doco '(atanh 9.640275800758169e-01)))

(test "7.342999410462080e-01" (doco '(erfc 0.24)))
(test "4.800000000000000e+01" (doco '(ldexp 3.0 4)))
(test "(9.625000000000000e-01 4)" (doco '(frexp 15.4)))
(test "3.330000000000000e-01" (doco '(fmod 3.333 1.0)))

(test "1.414213562373095e+00" (doco '(hypot 1.0 1.0)))
(test "1.414213562373095e+4000" (doco '(hypot 1.0e4000 1.0e4000)))

(test "1" (doco '(bits-and 1 (bits-and 3 9))))
(test "15" (doco '(bits-or 1 (bits-or 2 (bits-or 4 8)))))
(test "14" (doco '(bits-xor 1 15)))
(test "-14" (doco '(bits-not 13)))
(test "1024" (doco '(bits-shift 1 10)))
(test "256" (doco '(bits-shift 1 8)))
(test "16" (doco '(bits-shift 1 4)))
(test "0" (doco '(bits-shift 1 -1)))
(test "1" (doco '(bits-shift 1024 -10)))
(test "4" (doco '(bits-shift 1024 -8)))
(test "0" (doco '(bits-shift 1024 -11)))

(test "0" (doco '(bits-get 1024 8)))
(test "1024" (doco '(bits-get 1024 10)))
(test "#f" (doco '(bits-set? 1024 8)))
(test "#t" (doco '(bits-set? 1024 10)))

(test "1040" (doco '(bits-set 1024 4)))
(test "16" (doco '(bits-clear 1040 10)))
(test "16" (doco '(bits-flip 1040 10)))
(test "1040" (doco '(bits-flip 16 10)))

(test "14/1" (doco '(_int->rat_ 14)))
(test "1.400000000000000e+01" (doco '(_int->real_ 14)))
(test "1.400000000000000e+01" (doco '(_int->cmplx_ 14)))
(test "4.333333333333333e+00" (doco '(_rat->real_ 13/3)))

(test "#t" (doco '(_rat? (_int->rat_ 14))))
(test "#f" (doco '(_real? (_int->rat_ 14))))
(test "#t" (doco '(real? (_int->rat_ 14))))
(test "#t" (doco '(_real? (_int->real_ 14))))
(test "#f" (doco '(_rat? (_int->real_ 14))))
(test "#t" (doco '(complex? (_int->real_ 14))))
(test "#f" (doco '(_cmplx? (_int->real_ 14))))
(test "1.400000000000000e+01" (doco '(_int->cmplx_ 14)))
(test "#t" (doco '(_cmplx? (_int->cmplx_ 14))))
(test "4.333333333333333e+00" (doco '(_rat->real_ 13/3)))
(test "4.333333333333333e+00" (doco '(_rat->cmplx_ 13/3)))
(test "#t" (doco '(_cmplx? (_rat->cmplx_ 13/3))))

(test "(a b)" (doco '(cons 'a (cons 'b ()))))
(test "#t" (doco '(pair? (cons 'a (cons 'b ())))))
(test "a" (doco '(car (cons 'a (cons 'b ())))))
(test "(b)" (doco '(cdr (cons 'a (cons 'b ())))))
(test "b" (doco '(cxr "cadr" (cons 'a (cons 'b ())))))

(test "b" (doco '(cadr (cons 'a (cons 'b ())))))
(test "(c)" (doco '(cddr (cons 'a (cons 'b (cons 'c ()))))))

(test "(a b)" (doco '(cxr "cr" (cons 'a (cons 'b ())))))

;;; These tests pass, but set-c[ad]r! is broken; see wtest/test_42.scm
(test "(c b)" (doco '(set-car! (cons 'a (cons 'b ())) 'c)))
(test "(a . c)" (doco '(set-cdr! (cons 'a (cons 'b ())) 'c)))

(test "caught exception from /home/uwe/github/wile/test-wile.scm:1820\n    'car' input is not a pair!"
      (doco '(car 14)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:1822\n    'cdr' input is not a pair!"
      (doco '(cdr 14)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:1824\n    'set-car!' input is not a pair!"
      (doco '(set-car! 14 15)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:1826\n    'set-cdr!' input is not a pair!"
      (doco '(set-cdr! 14 15)))

(test "#f" (doco '(port? 17)))
(test "#t" (doco '(port? (open-file "wile-out.c" "r"))))
(test "#t" (doco '(close-port (open-file "wile-out.c" "r"))))
(test "1" (doco '(write-string (open-file "foobly.txt" "w") "now is the time to partay\n")))

(test "#f" (doco '(vector? 17)))
(test "#f" (doco '(bytevector? 17)))
(test "#f" (doco '(promise? 17)))
(test "#t" (doco '(vector? (vector 1 2 3))))
(test "#t" (doco '(bytevector? (bytevector 1 2 3))))

;;; these don't work, the compilation environment inside this file
;;; is too limited and cannot properly handle non-atomic literals
;;; (test "#t" (doco '(vector? #(1 2 3))))
;;; (test "#t" (doco '(bytevector? #u8(1 2 3))))

(test "#t" (doco '(file-exists? "coyote")))
(test "#t" (doco '(file-readable? "coyote")))
(test "#t" (doco '(file-writable? "coyote")))
(test "#t" (doco '(file-executable? "coyote")))
(test "#f" (doco '(file-exists? "flarbzeeply")))
(test "#f" (doco '(file-readable? "flarbzeeply")))
(test "#f" (doco '(file-writable? "flarbzeeply")))
(test "#f" (doco '(file-executable? "flarbzeeply")))

(test "#t" (doco '(file-exists? "/etc/passwd")))
(test "#t" (doco '(file-readable? "/etc/passwd")))
(test "#f" (doco '(file-writable? "/etc/passwd")))
(test "#f" (doco '(file-executable? "/etc/passwd")))
(test "#t" (doco '(file-exists? "/etc/shadow")))
(test "#f" (doco '(file-readable? "/etc/shadow")))
(test "#f" (doco '(file-writable? "/etc/shadow")))
(test "#f" (doco '(file-executable? "/etc/shadow")))

(test "\"Bad address\"" (doco '(describe-system-error 14)))

(test "now\nis\nthe\ntime\nfor\nall\ngood\nmen\n#t"
      (doco '(begin (write-string "now") (newline)
		    (write-string "is") (newline)
		    (write-string "the") (newline)
		    (write-string "time") (newline)
		    (write-string "for") (newline)
		    (write-string "all") (newline)
		    (write-string "good") (newline)
		    (write-string "men") (newline))))

(remove-file "coywolf")
(remove-file "woycolf")

(test "#t" (doco '(create-link "coyote" "coywolf")))
(test "#t" (doco '(create-symbolic-link "coyote" "woycolf")))

(test "#t" (doco '(create-directory "test-dir1")))
(test "#t" (doco '(rename-directory "test-dir1" "test-dir2")))
(test "#t" (doco '(remove-directory "test-dir2")))

(test "hello world\n0" (doco '(run-command "echo hello world")))
(test "#t" (doco '(remove-file "wile-out.c")))

(test "\"13\"" (doco '(number->string 13)))
(test "\"#{11}12\"" (doco '(number->string 13 11)))
(test "\"#o15\"" (doco '(number->string 13 8)))
(test "\"#xd\"" (doco '(number->string 13 16)))

(test "\"#o3.11037552421026427572206706570256367e0\""
      (doco '(number->string 3.141592653589793 8)))

(test "\"#x3.243f6a8885a2f7a4371af0ae7bca0000000x0\""
      (doco '(number->string 3.141592653589793 16)))

(test "\"#o3.1103755242102642\""
      (doco '(number->string 3.141592653589793 8 16)))
(test "\"#x3.243f6a8885a2f7a4\""
      (doco '(number->string 3.141592653589793 16 16)))

(test "\"#o3.1103755242102642e0\""
      (doco '(number->string 3.141592653589793 8 -16)))
(test "\"#x3.243f6a8885a2f7a4x0\""
      (doco '(number->string 3.141592653589793 16 -16)))

(test "4" (doco '(list-length (cons 'a (cons 'b (cons 'c (cons 'd ())))))))
;;; TODO: after compiling the code, the error message gets generated elsewhere
;;; fix, but it's low priority
;;; (test "caught exception\n    'list-length' input is not a proper list"
(test "caught exception from bld-rtl-dir/wile-rtl2-000001.scm:20\n    'cdr' input is not a pair!"
      (doco '(list-length (cons 'a (cons 'b (cons 'c (cons 'd 'e)))))))
(test "4" (doco '(length (cons 'a (cons 'b (cons 'c (cons 'd ())))))))

(test "(1 2 3 4)" (doco '(let ((a 1) (b 2) (c 3) (d 4) (e ()))
			   (cons a (cons b (cons c (cons d e)))))))

(test "1 2 3 4 5 ()\n#t"
      (doco '(let ((l (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 ())))))))
	       (display (list-ref l 0))
	       (write-string #\space)
	       (display (list-ref l 1))
	       (write-string #\space)
	       (display (list-ref l 2))
	       (write-string #\space)
	       (display (list-ref l 3))
	       (write-string #\space)
	       (display (list-ref l 4))
	       (write-string #\space)
	       (display (list-ref l 5))
	       (newline))))

(test "(1 2 3 4 5 6 7 8)\n(1 2 (3 4) (5 (6) 7) 8)\n#t"
      (doco '(let ((l (list 1 2 (list 3 4) (list 5 (list 6) 7) 8)))
	       (display (list-flatten l))
	       (newline)
	       (display l)
	       (newline))))

(test "gnarly\n3\npie\n#t"
      (doco '(let ((pie 3) (ig (write-string "gnarly\n")))
	       (display pie) (newline)
	       (display 'pie) (newline))))

(test "3.41157596 0.69929307 3\n2.14993818 0.86706199 2\n1.33198093 0.09127677 3\n1.02463164 0.49584599 0\n1.01900488 0.35223835 2\n1.19365772 0.09390076 1\n3.17528422 0.72529032 0\n1.02067900 0.28824487 2\n2.70701681 1.01554609 4\n1.19404243 0.43345193 3\n10"
      (doco '(let ((i 0))
	       (random-seed! 1234567)
	       (while (< i 10)
		      (set! i (+ i 1))
		      (write-string
		       (number->string (random-uniform 1.0 3.5) 10 8))
		      (write-string #\space)
		      (write-string
		       (number->string (random-exponential 3.1) 10 8))
		      (write-string #\space)
		      (write-string (number->string (random-poisson 2.5)))
		      (write-string #\newline)))))

(test "1 1\n2 2\n3 6\n4 24\n5 120\n6 720\n7 5040\n8 40320\n9 362880\n10 3628800\n10"
      (doco '(let ((i 0))
	       (random-seed! 1234567)
	       (while (< i 10)
		      (set! i (+ i 1))
		      (write-string (number->string i))
		      (write-string #\space)
		      (write-string (number->string (factorial i)))
		      (write-string #\newline)))))

(test "pie1 3\ngnarly\npie2 4\n17"
      (doco '(let* ((pie 3)
		    (ig1 (write-string "pie1 "))
		    (ig2 (write-string (number->string pie)))
		    (ig3 (newline)))
	       (write-string "gnarly\n")
	       (let ((pie 4))
		 (write-string "pie2 ")
		 (write-string (number->string pie))
		 (newline)
		 17))))

(test "(5 2)" (doco '(truncate/ 17 3)))
(test "(-5 -2)" (doco '(truncate/ -17 3)))
(test "(-5 2)" (doco '(truncate/ 17 -3)))
(test "(5 -2)" (doco '(truncate/ -17 -3)))
(test "5" (doco '(truncate-quotient 17 3)))
(test "-5" (doco '(truncate-quotient -17 3)))
(test "-5" (doco '(truncate-quotient 17 -3)))
(test "5" (doco '(truncate-quotient -17 -3)))
(test "2" (doco '(truncate-remainder 17 3)))
(test "-2" (doco '(truncate-remainder -17 3)))
(test "2" (doco '(truncate-remainder 17 -3)))
(test "-2" (doco '(truncate-remainder -17 -3)))

(test "(5 2)" (doco '(quot-rem 17 3)))
(test "(-5 -2)" (doco '(quot-rem -17 3)))
(test "(-5 2)" (doco '(quot-rem 17 -3)))
(test "(5 -2)" (doco '(quot-rem -17 -3)))
(test "5" (doco '(quotient 17 3)))
(test "-5" (doco '(quotient -17 3)))
(test "-5" (doco '(quotient 17 -3)))
(test "5" (doco '(quotient -17 -3)))
(test "2" (doco '(remainder 17 3)))
(test "-2" (doco '(remainder -17 3)))
(test "2" (doco '(remainder 17 -3)))
(test "-2" (doco '(remainder -17 -3)))

(test "(5 2)" (doco '(floor/ 17 3)))
(test "(-6 1)" (doco '(floor/ -17 3)))
(test "(-6 -1)" (doco '(floor/ 17 -3)))
(test "(5 -2)" (doco '(floor/ -17 -3)))
(test "5" (doco '(floor-quotient 17 3)))
(test "-6" (doco '(floor-quotient -17 3)))
(test "-6" (doco '(floor-quotient 17 -3)))
(test "5" (doco '(floor-quotient -17 -3)))
(test "2" (doco '(floor-remainder 17 3)))
(test "1" (doco '(floor-remainder -17 3)))
(test "-1" (doco '(floor-remainder 17 -3)))
(test "-2" (doco '(floor-remainder -17 -3)))
(test "2" (doco '(modulo 17 3)))
(test "1" (doco '(modulo -17 3)))
(test "-1" (doco '(modulo 17 -3)))
(test "-2" (doco '(modulo -17 -3)))

(test "(6 -1)" (doco '(ceiling/ 17 3)))
(test "(-5 -2)" (doco '(ceiling/ -17 3)))
(test "(-5 2)" (doco '(ceiling/ 17 -3)))
(test "(6 1)" (doco '(ceiling/ -17 -3)))
(test "6" (doco '(ceiling-quotient 17 3)))
(test "-5" (doco '(ceiling-quotient -17 3)))
(test "-5" (doco '(ceiling-quotient 17 -3)))
(test "6" (doco '(ceiling-quotient -17 -3)))
(test "-1" (doco '(ceiling-remainder 17 3)))
(test "-2" (doco '(ceiling-remainder -17 3)))
(test "2" (doco '(ceiling-remainder 17 -3)))
(test "1" (doco '(ceiling-remainder -17 -3)))

(test
 "0 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000\n1 0.00000000 0.12500000 0.25000000 0.37500000 0.50000000 0.62500000 0.75000000 0.87500000 1.00000000\n2 -0.50000000 -0.47656250 -0.40625000 -0.28906250 -0.12500000 0.08593750 0.34375000 0.64843750 1.00000000\n3 -0.00000000 -0.18261719 -0.33593750 -0.43066406 -0.43750000 -0.32714844 -0.07031250 0.36230469 1.00000000\n4 0.37500000 0.31747437 0.15771484 -0.06582642 -0.28906250 -0.42227173 -0.35009766 0.06845093 1.00000000\n5 0.00000000 0.21752548 0.33972168 0.30009842 0.08984375 -0.21333694 -0.41638184 -0.18203354 1.00000000\n6"
 (doco
  '(let ((n 0))
     (while (< n 6)
	    (write-string (number->string n))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.0) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.125) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.25) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.375) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.5) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.625) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.75) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 0.875) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-legendre n 1.0) 10 8))
	    (newline)
	    (set! n (+ n 1))))))

(test
 "0 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000\n1 1.00000000 0.87500000 0.75000000 0.62500000 0.50000000 0.37500000 0.25000000 0.12500000 0.00000000\n2 1.00000000 0.75781250 0.53125000 0.32031250 0.12500000 -0.05468750 -0.21875000 -0.36718750 -0.50000000\n3 1.00000000 0.64811198 0.34114583 0.07714844 -0.14583333 -0.32975260 -0.47656250 -0.58821615 -0.66666667\n4 1.00000000 0.54558309 0.17724609 -0.11245728 -0.33072917 -0.48452759 -0.58056641 -0.62531535 -0.62500000\n5 1.00000000 0.44992040 0.03726400 -0.25570755 -0.44557292 -0.54778163 -0.57668457 -0.54556452 -0.46666667\n6"
 (doco
  '(let ((n 0))
     (while (< n 6)
	    (write-string (number->string n))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.0) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.125) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.25) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.375) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.5) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.625) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.75) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 0.875) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-laguerre n 1.0) 10 8))
	    (newline)
	    (set! n (+ n 1))))))

(test
 "0 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000\n1 0.00000000 0.25000000 0.50000000 0.75000000 1.00000000 1.25000000 1.50000000 1.75000000 2.00000000\n2 -2.00000000 -1.93750000 -1.75000000 -1.43750000 -1.00000000 -0.43750000 0.25000000 1.06250000 2.00000000\n3 -0.00000000 -1.48437500 -2.87500000 -4.07812500 -5.00000000 -5.54687500 -5.62500000 -5.14062500 -4.00000000\n4 12.00000000 11.25390625 9.06250000 5.56640625 1.00000000 -4.30859375 -9.93750000 -15.37109375 -20.00000000\n5 0.00000000 14.68847656 27.53125000 36.79980469 41.00000000 38.98925781 30.09375000 14.22558594 -8.00000000\n6"
 (doco
  '(let ((n 0))
     (while (< n 6)
	    (write-string (number->string n))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.0) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.125) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.25) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.375) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.5) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.625) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.75) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 0.875) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite1 n 1.0) 10 8))
	    (newline)
	    (set! n (+ n 1))))))

(test
 "0 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000\n1 0.00000000 0.12500000 0.25000000 0.37500000 0.50000000 0.62500000 0.75000000 0.87500000 1.00000000\n2 -1.00000000 -0.98437500 -0.93750000 -0.85937500 -0.75000000 -0.60937500 -0.43750000 -0.23437500 0.00000000\n3 -0.00000000 -0.37304688 -0.73437500 -1.07226562 -1.37500000 -1.63085938 -1.82812500 -1.95507812 -2.00000000\n4 3.00000000 2.90649414 2.62890625 2.17602539 1.56250000 0.80883789 -0.05859375 -1.00756836 -2.00000000\n5 0.00000000 1.85549927 3.59472656 5.10507202 6.28125000 7.02896118 7.26855469 6.93869019 6.00000000\n6"
 (doco
  '(let ((n 0))
     (while (< n 6)
	    (write-string (number->string n))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.0) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.125) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.25) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.375) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.5) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.625) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.75) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 0.875) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-hermite2 n 1.0) 10 8))
	    (newline)
	    (set! n (+ n 1))))))

(test
 "0 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000\n1 0.00000000 0.12500000 0.25000000 0.37500000 0.50000000 0.62500000 0.75000000 0.87500000 1.00000000\n2 -1.00000000 -0.96875000 -0.87500000 -0.71875000 -0.50000000 -0.21875000 0.12500000 0.53125000 1.00000000\n3 -0.00000000 -0.36718750 -0.68750000 -0.91406250 -1.00000000 -0.89843750 -0.56250000 0.05468750 1.00000000\n4 1.00000000 0.87695312 0.53125000 0.03320312 -0.50000000 -0.90429688 -0.96875000 -0.43554688 1.00000000\n5 0.00000000 0.58642578 0.95312500 0.93896484 0.50000000 -0.23193359 -0.89062500 -0.81689453 1.00000000\n6"
 (doco
  '(let ((n 0))
     (while (< n 6)
	    (write-string (number->string n))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.0) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.125) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.25) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.375) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.5) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.625) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.75) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 0.875) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev1 n 1.0) 10 8))
	    (newline)
	    (set! n (+ n 1))))))

(test
 "0 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000\n1 0.00000000 0.25000000 0.50000000 0.75000000 1.00000000 1.25000000 1.50000000 1.75000000 2.00000000\n2 -1.00000000 -0.93750000 -0.75000000 -0.43750000 0.00000000 0.56250000 1.25000000 2.06250000 3.00000000\n3 -0.00000000 -0.48437500 -0.87500000 -1.07812500 -1.00000000 -0.54687500 0.37500000 1.85937500 4.00000000\n4 1.00000000 0.81640625 0.31250000 -0.37109375 -1.00000000 -1.24609375 -0.68750000 1.19140625 5.00000000\n5 0.00000000 0.68847656 1.03125000 0.79980469 0.00000000 -1.01074219 -1.40625000 0.22558594 6.00000000\n6"
 (doco
  '(let ((n 0))
     (while (< n 6)
	    (write-string (number->string n))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.0) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.125) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.25) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.375) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.5) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.625) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.75) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 0.875) 10 8))
	    (write-string #\space)
	    (write-string (number->string (poly-chebyshev2 n 1.0) 10 8))
	    (newline)
	    (set! n (+ n 1))))))

(test "0 0.99609756 0.98443593 0.96515154 0.93846981 0.90470222 0.86424228 0.81756036 0.76519769\n1 0.06237801 0.12402598 0.18422336 0.24226846 0.29748755 0.34924360 0.39694448 0.44005059\n2 0.00195058 0.00777189 0.01737303 0.03060402 0.04725794 0.06707400 0.08974131 0.11490348\n3 0.00004065 0.00032425 0.00108901 0.00256373 0.00496329 0.00848438 0.01330150 0.01956335\n4 0.00000064 0.00001014 0.00005114 0.00016074 0.00038967 0.00080107 0.00146900 0.00247664\n5 0.00000001 0.00000025 0.00000192 0.00000805 0.00002443 0.00006036 0.00012937 0.00024976\n6"
      (doco '(let ((n 0))
	       (while (< n 6)
		      (write-string (number->string n))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.125) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.25) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.375) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.5) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.625) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.75) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 0.875) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 1.0) 10 8))
		      (newline)
		      (set! n (+ n 1))))))

(test "0 0.99609756 0.98443593 0.96515154 0.93846981 0.90470222 0.86424228 0.81756036 0.76519769\n1 0.06237801 0.12402598 0.18422336 0.24226846 0.29748755 0.34924360 0.39694448 0.44005059\n2 0.00195058 0.00777189 0.01737303 0.03060402 0.04725794 0.06707400 0.08974131 0.11490348\n3 0.00004065 0.00032425 0.00108901 0.00256373 0.00496329 0.00848438 0.01330150 0.01956335\n4 0.00000064 0.00001014 0.00005114 0.00016074 0.00038967 0.00080107 0.00146900 0.00247664\n5 0.00000001 0.00000025 0.00000192 0.00000805 0.00002443 0.00006036 0.00012937 0.00024976\n6"
      (doco '(let ((n 0))
	       (while (< n 6)
		      (write-string (number->string n))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 1/8) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 1/4) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 3/8) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 1/2) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 5/8) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 3/4) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 7/8) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-j n 1) 10 8))
		      (newline)
		      (set! n (+ n 1))))))

(test "0 -1.38968063 -0.93157302 -0.65180021 -0.44451873 -0.27754697 -0.13717277 -0.01650823 0.08825696\n1 -5.19993611 -2.70410523 -1.88336181 -1.47147239 -1.21715010 -1.03759455 -0.89793774 -0.78121282\n2 -81.80929718 -20.70126881 -9.39279614 -5.44137084 -3.61733336 -2.62974603 -2.03592090 -1.65068261\n3 -2612.69757350 -328.51619572 -98.30646366 -42.05949430 -21.93378341 -12.98771762 -8.40912921 -5.82151761\n4 -125327.67423086 -7863.68742857 -1563.51062237 -499.27256082 -206.94698740 -101.27199495 -55.62667940 -33.27842303\n5 -8018358.45320132 -251309.48151852 -33256.58681364 -7946.30147881 -2626.98765527 -1067.24689523 -500.17765385 -260.40586663\n6"
      (doco '(let ((n 0))
	       (while (< n 6)
		      (write-string (number->string n))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.125) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.25) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.375) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.5) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.625) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.75) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 0.875) 10 8))
		      (write-string #\space)
		      (write-string (number->string (bessel-y n 1.0) 10 8))
		      (newline)
		      (set! n (+ n 1))))))

(test "0" (doco '(ilog 0)))
(test "0" (doco '(ilog 1)))
(test "1" (doco '(ilog 3)))
(test "1" (doco '(ilog -3)))
(test "2" (doco '(ilog 5)))
(test "2" (doco '(ilog -5)))
(test "17" (doco '(ilog 250000)))

(test "#(() () () () ())" (doco '(vector-create 5)))
(test "#(() () () () ())" (doco '(make-vector 5)))

(test "#(foo foo foo foo foo)" (doco '(vector-create 5 'foo)))
(test "#(bar bar bar bar bar)" (doco '(make-vector 5 'bar)))
(test "#(3 3 3 3 3)" (doco '(vector-create 5 (+ 1 2))))

(test "#(13 13 13 13 13)" (doco '(vector-fill! (vector-create 5) 13)))

(test "5" (doco '(vector-length (vector-create 5))))

(test "13" (doco '(let ((vec (vector-create 5)))
		    (vector-fill! vec 13)
		    (vector-ref vec 0))))

(test "caught exception from /home/uwe/github/wile/test-wile.scm:2295\n    'vector-ref' got bad index value"
      (doco '(let ((vec (vector-create 5)))
	       (vector-fill! vec 13)
	       (vector-ref vec 'foo))))

(test "#(0 #f 6 #f 12 #f 18 #f 24 #f 30 #f)"
      (doco '(let* ((n 12)
		    (vec (vector-create n #f))
		    (i 0))
	       (while (< i n)
		      (vector-set! vec i (* 3 i))
		      (set! i (+ i 2)))
	       vec)))

(test "#(#f #f 6 0 12 #f 18 #f 24 #f 30 #f)"
      (doco '(let* ((n 12)
		    (vec (vector-create n #f))
		    (i 0))
	       (while (< i n)
		      (vector-set! vec i (* 3 i))
		      (set! i (+ i 2)))
	       (vector-swap! vec 0 3))))

(test "#f 18\n#t"
      (doco '(let* ((n 12)
		    (vec (vector-create n #f))
		    (i 0))
	       (while (< i n)
		      (vector-set! vec i (* 3 i))
		      (set! i (+ i 2)))
	       (display (vector-ref vec 3))
	       (write-string #\space)
	       (display (vector-ref vec 6))
	       (newline))))

(test "foo bar baz\n1"
      (doco '(let ((tst #t))
	       (when tst
		 (write-string "foo ")
		 (write-string "bar ")
		 (write-string "baz\n")))))

(test "#f"
      (doco '(let ((tst #f))
	       (when tst
		 (write-string "foo ")
		 (write-string "bar ")
		 (write-string "baz\n")))))

(test "foo bar baz\n1"
      (doco '(let ((tst #f))
	       (unless tst
		 (write-string "foo ")
		 (write-string "bar ")
		 (write-string "baz\n")))))

(test "#f"
      (doco '(let ((tst #t))
	       (unless tst
		 (write-string "foo ")
		 (write-string "bar ")
		 (write-string "baz\n")))))

(test "12\n#t" (doco '(let ((fp (open-file "foobly.txt" "w")))
			(write-string fp "hello" #\space "world" #\newline)
			(display (get-file-position fp))
			(newline))))

(test "\"world\"\n#t" (doco '(let ((fp (open-file "foobly.txt" "w+")))
			(write-string fp "hello" #\space "world" #\newline)
			(set-file-position fp 6)
			(display (read-line fp))
			(newline))))

(test "\"rld\"\n#t" (doco '(let ((fp (open-file "foobly.txt" "w+")))
			(write-string fp "hello world\n")
			(set-file-position fp -4 'end)
			(display (read-line fp))
			(newline))))

(test "\"hello world\""
      (doco '(read-line (run-read-command "echo hello world"))))

(test "dlrow olleh11"
      (doco '(let* ((fp (run-read-command "echo hello world"))
		    (c1 (read-char fp))
		    (c2 (read-char fp))
		    (c3 (read-char fp))
		    (c4 (read-char fp))
		    (c5 (read-char fp))
		    (c6 (read-char fp))
		    (c7 (read-char fp))
		    (c8 (read-char fp))
		    (c9 (read-char fp))
		    (c10 (read-char fp))
		    (c11 (read-char fp)))
	       (close-port fp)
	       (write-string c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1))))

(test "hello world\n#t"
      (doco '(begin (write-string #\h) (flush-port stdout) (sleep 0.1)
		    (write-string #\e) (flush-port stdout) (sleep 0.1)
		    (write-string #\l) (flush-port stdout) (sleep 0.1)
		    (write-string #\l) (flush-port stdout) (sleep 0.1)
		    (write-string #\o) (flush-port stdout) (sleep 0.1)
		    (write-string #\space) (flush-port stdout) (sleep 0.1)
		    (write-string #\w) (flush-port stdout) (sleep 0.1)
		    (write-string #\o) (flush-port stdout) (sleep 0.1)
		    (write-string #\r) (flush-port stdout) (sleep 0.1)
		    (write-string #\l) (flush-port stdout) (sleep 0.1)
		    (write-string #\d) (newline))))

(test "hello world\n#t"
      (doco '(begin (set-no-buffering! stdout)
		    (write-string #\h) (sleep 0.1)
		    (write-string #\e) (sleep 0.1)
		    (write-string #\l) (sleep 0.1)
		    (write-string #\l) (sleep 0.1)
		    (write-string #\o) (sleep 0.1)
		    (write-string #\space) (sleep 0.1)
		    (write-string #\w) (sleep 0.1)
		    (write-string #\o) (sleep 0.1)
		    (write-string #\r) (sleep 0.1)
		    (write-string #\l) (sleep 0.1)
		    (write-string #\d) (newline))))

(test "((a b c) (1 2) (a) ())"
      (doco '(list (list 'a 'b 'c) (list 1 2) (list 'a) (list))))
(test "(a b c)"
      (doco '(car (list (list 'a 'b 'c) (list 1 2) (list 'a) (list)))))
(test "(1 2)"
      (doco '(cadr (list (list 'a 'b 'c) (list 1 2) (list 'a) (list)))))
(test "((a) ())"
      (doco '(cddr (list (list 'a 'b 'c) (list 1 2) (list 'a) (list)))))

(test "\"hello world\"\n#t"
      (doco '(begin (display (char->string #\h #\e #\l #\l #\o #\space #\w #\o #\r #\l #\d))
		    (newline))))

(test "#\\w" (doco '(string-ref "hello world" 6)))

(test "\"XXXXXXXXXXXXXXXX\"" (doco '(make-string 16)))
(test "\"XXXXXXXXXXXXXXXX\"" (doco '(string-create 16)))

(test "\"tttttttttttttttt\"" (doco '(make-string 16 #\t)))
(test "\"tttttttttttttttt\"" (doco '(string-create 16 #\t)))

(test "\"hello world XXXX\""
      (doco '(let ((s (string-create 16)))
	       (string-set! s 0 #\h)
	       (string-set! s 1 #\e)
	       (string-set! s 2 #\l)
	       (string-set! s 3 #\l)
	       (string-set! s 4 #\o)
	       (string-set! s 5 #\space)
	       (string-set! s 6 #\w)
	       (string-set! s 7 #\o)
	       (string-set! s 8 #\r)
	       (string-set! s 9 #\l)
	       (string-set! s 10 #\d)
	       (string-set! s 11 #\space)
	       s)))

(test "25" (doco '(let ((x (list 1 3 5 7 9)))
		    (do ((x x (cdr x))
			 (sum 0 (+ sum (car x))))
			((null? x) sum)))))

(test "35" (doco '(let ((x (list 1 3 5 7 9)))
		    (do ((x x (cdr x))
			 (monkey 2)
			 (sum 0 (+ sum (+ monkey (car x)))))
			((null? x) sum)))))

(test "\"coyote\" ()\n#t"
      (doco '(begin (display command-name) (write-string #\space)
		    (display command-line-arguments) (newline))))

(test "(1 2 3 4 5)" (doco '(list-tail (list 1 2 3 4 5) -2)))
(test "(1 2 3 4 5)" (doco '(list-tail (list 1 2 3 4 5) 0)))
(test "(3 4 5)" (doco '(list-tail (list 1 2 3 4 5) 2)))
(test "(5)" (doco '(list-tail (list 1 2 3 4 5) 4)))
(test "()" (doco '(list-tail (list 1 2 3 4 5) 5)))
(test "()" (doco '(list-tail (list 1 2 3 4 5) 15)))

(test "#f" (doco '(list? 'quark)))
(test "#f" (doco '(list? 14)))
(test "#t" (doco '(list? ())))
(test "#t" (doco '(list? (list 1 2 3))))
(test "#f" (doco '(list? (cons 1 (cons 2 (cons 3 4))))))

(test "3" (doco '(list-last (list 1 2 3))))
(test "()" (doco '(list-last ())))
;;; TODO: after compiling the code, the error message gets generated elsewhere
;;; fix, but it's low priority
(test "caught exception from bld-rtl-dir/wile-rtl2-000007.scm:17\n    'car' input is not a pair!"
      (doco '(list-last (cons 1 (cons 2 (cons 3 4))))))

(test "14" (doco '(integer 14)))
(test "-14" (doco '(integer -14)))
(test "14" (doco '(integer 143/10)))
(test "-14" (doco '(integer -143/10)))
(test "14" (doco '(integer 14.37)))
(test "-14" (doco '(integer -14.37)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:2497\n    'integer' expects one real-valued argument"
      (doco '(integer 'chezbro)))

(test "1.400000000000000e+01" (doco '(float 14)))
(test "-1.400000000000000e+01" (doco '(float -14.0)))
(test "1.430000000000000e+01" (doco '(float 143/10)))
(test "-1.430000000000000e+01" (doco '(float -143/10)))
(test "1.437000000000000e+01" (doco '(float 14.37)))
(test "-1.437000000000000e+01" (doco '(float -14.37)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:2506\n    'float' expects a real-valued input"
      (doco '(float 'chezbro)))

(test "65536" (doco '(expt 2 16)))
(test "1/65536" (doco '(expt 2 -16)))
(test "19683" (doco '(expt 3 9)))
(test "1/19683" (doco '(expt 3 -9)))
(test "7625597484987" (doco '(expt 3 (expt 3 3))))

(test "43046721/65536" (doco '(expt 3/2 16)))
(test "6.553600000000000e+04" (doco '(expt 2.0 16)))
(test "6.553600000000000e+04" (doco '(expt 2 16.0)))
(test "6.553600000000000e+04" (doco '(expt 2.0 16.0)))
(test "6.568408355712891e+02" (doco '(expt 3/2 16.0)))
(test "7.825422900366437e-01+7.825422900366437e-01i" (doco '(expt -3/2 1/4)))

(test "\"meh\"" (doco '(string-copy "meh")))
(test "\"ooh\"" (doco '(string-copy "fooh" 1)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:2524\n    'string-copy' start index is out of range"
      (doco '(string-copy "fooh" 13)))

(test "\"oobi\"" (doco '(string-copy "fooboobish's son's sea" 4 8)))
(test "caught exception from /home/uwe/github/wile/test-wile.scm:2528\n    'string-copy' end index is out of range"
      (doco '(string-copy "fooboobish's son's sea" 8 4)))

(test "(1 2 3 4 5) (5 4 3 2 1)\n#t"
      (doco '(let* ((lst (list 1 2 3 4 5))
		    (tsl (list-reverse lst)))
	       (display lst)
	       (write-string #\space)
	       (display tsl)
	       (newline))))

(test "(-1 2 3 4 5) (5 4 3 2 1)\n#t"
      (doco '(let* ((lst (list 1 2 3 4 5))
		    (tsl (list-reverse lst)))
	       (set-car! lst -1)
	       (display lst)
	       (write-string #\space)
	       (display tsl)
	       (newline))))

(test "#t" (doco '(eqv? #t #t)))
(test "#t" (doco '(eqv? #f #f)))
(test "#t" (doco '(eqv? 1 1)))
(test "#t" (doco '(eqv? 1.0e77 1.0e77)))
(test "#t" (doco '(eqv? () ())))
(test "#t" (doco '(eqv? #\space #\x20)))
(test "#t" (doco '(eqv? 'plorp 'plorp)))
(test "#t" (doco '(eqv? (cons 1 3.4) (cons 1 3.4))))

(test "#f" (doco '(eqv? #t #f)))
(test "#f" (doco '(eqv? #t 1)))
(test "#f" (doco '(eqv? 1 1.0)))
(test "#f" (doco '(eqv? () 'a)))

;;; TODO: after compiling the code, the error message gets generated elsewhere
;;; fix, but it's low priority
;;; (test "caught exception\n    'list-reverse' expects one list argument"
(test "caught exception from bld-rtl-dir/wile-rtl2-000000.scm:19\n    'car' input is not a pair!"
      (doco '(let* ((lst (cons 1 (cons 2 (cons 3 4))))
		    (tsl (list-reverse lst)))
	       (display lst)
	       (write-string #\space)
	       (display tsl))))

(test "#(1 2 3 4 5)" (doco '(list->vector (list 1 2 3 4 5))))
(test "#(1 2 3 4 5)" (doco '(vector 1 2 3 4 5)))

(test "(1 2 3 4 5 6 7 8 9 4 5 6 1 2 3)\n(1 2 3)\n(4 5 6)\n(7 8 9)\n#t"
      (doco '(let ((l1 (list 1 2 3))
		   (l2 (list 4 5 6))
		   (l3 (list 7 8 9)))
	       (display (list-append l1 l2 l3 l2 l1))
	       (newline)
	       (display l1)
	       (newline)
	       (display l2)
	       (newline)
	       (display l3)
	       (newline))))

(test "(1 2 3)" (doco '(list-append (list 1 2 3))))

(test "()" (doco '(list-append)))

(test "(#\\q #\\u #\\u #\\x #\\e #\\l #\\a #\\n #\\s #\\e #\\l #\\m)"
      (doco '(string->list "quuxelanselm")))

(test "(#\\o)" (doco '(string->list "o")))

(test "()" (doco '(string->list "")))

(test "(1 2 3 #f 4.500000000000000e+00 quux)"
      (doco '(vector->list (vector 1 2 3 #f 4.5 'quux))))

(test "\"foobarbiezonkeratorblippit\""
      (doco '(string-append "foo" "barbie" "zonkerator" "blippit")))

(test "\"foobar\"" (doco '(string-append "foo" "" "bar")))

(test "\"foo\"" (doco '(string-append "foo")))
(test "\"\"" (doco '(string-append)))

(test "\"(now 4 (is 2) 'the \"time\" 4 'ALL)\"\n((now 4 (is 2) (quote the) \"time\" 4 (quote ALL)))\n\"(now 4 (is 2) 'the \"time\" 4 'ALL)\"\n#t"
      (doco '(let ((s "(now 4 (is 2) 'the \"time\" 4 'ALL)"))
	       (display s)
	       (newline)
	       (let ((p (parse-string s)))
		 (display p)
		 (newline))
	       (display s)
	       (newline))))

(test "180" (doco '(expmod 43 1234567 419)))

(test "\"\"" (doco '(string-join-by "")))
(test "\"foo\"" (doco '(string-join-by "" "foo")))
(test "\"foobarbazquux\""
      (doco '(string-join-by "" "foo" "bar" "baz" "quux")))

(test "\"\"" (doco '(string-join-by ",")))
(test "\"foo\"" (doco '(string-join-by "," "foo")))
(test "\"foo,bar,baz,quux\""
      (doco '(string-join-by "," "foo" "bar" "baz" "quux")))

(test "\"\"" (doco '(string-join-by "" ())))
(test "\"foo\"" (doco '(string-join-by "" (list "foo"))))
(test "\"foobarbazquux\""
      (doco '(string-join-by "" (list "foo" "bar" "baz" "quux"))))

(test "\"\"" (doco '(string-join-by "," ())))
(test "\"foo\"" (doco '(string-join-by "," (list "foo"))))
(test "\"foo,bar,baz,quux\""
      (doco '(string-join-by "," (list "foo" "bar" "baz" "quux"))))

;;; really it returns a list, but it's a separate program
(test "(\"now\" \"is\" \"the\" \"time\")"
      (doco '(string-split-by-whitespace "now is the time")))

;;; we can't test apply <prim> directly, because it needs to write
;;; to the lambda port, and we don't set that up in the simplified
;;; compiling environment that doco uses.
;;; (test "" (doco '(apply gcd (list 15 25))))

(test "-1.118325591589630e-01" (doco '(lambert-W+ -0.1)))
(test "5.671432904097839e-01" (doco '(lambert-W+ 1)))
(test "9.077340528432470e-01" (doco '(lambert-W+ 2.25)))
(test "5.698228238818165e+00" (doco '(lambert-W+ 1700)))

(test "-1.118325591589630e-01" (doco '(lambert-W 0 -0.1)))
(test "5.671432904097839e-01" (doco '(lambert-W 0 1)))
(test "9.077340528432470e-01" (doco '(lambert-W 0 2.25)))
(test "5.698228238818165e+00" (doco '(lambert-W 0 1700)))

(test "2.049400419456604e+01" (doco '(log-gamma 13.2)))

(test
 (number->string (cmplx -1.7566267846037841105 4.7426644380346579282) 10 -15)
 (doco '(log-gamma (cmplx 3.0 4.0))))

(test "8.600470153764810e-01" (doco '(log-gamma -1.5)))

(test "6.587114060829884e-20" (doco '(log-gamma 1)))
(test "6.587114060829884e-20" (doco '(log-gamma 2)))

(test (number->string (log 2) 10 -15) (doco '(log-gamma 3)))

(test (number->string (log (* 15/8 (sqrt pi))) 10 -15)
      (doco '(log-gamma 7/2)))

(test (number->string (cmplx 1.265512123484645396488946 (- pi)) 10 -15)
      (doco '(log-gamma -0.5)))

(test (number->string (cmplx -0.05624371649767405067259453 (- pi)) 10 -15)
      (doco '(log-gamma -2.5)))

(test "6.807755278982137e+31" (doco '(log-gamma 1e30)))

(test "6.897755278982137e+302" (doco '(log-gamma 1e300)))

;;; (test "(cmplx 0.4980156681183560427 -0.1549498283018106851)"
;;;       (doco '(* (cmplx 0.0 1.0) (exp (log-gamma (cmplx 0.0 1.0))))))

(test "4.662403493582098e+00" (doco '(digamma -10.3)))

(test "-1.042375494041108e+01" (doco '(digamma 0.1)))

(test "-5.289039896592188e+00" (doco '(digamma 0.2)))

(test "-3.502524222200133e+00" (doco '(digamma 0.3)))

(test "-2.561384544585116e+00" (doco '(digamma 0.4)))

(test "-1.963510026021423e+00" (doco '(digamma 0.5)))

(test "-1.540619213893190e+00" (doco '(digamma 0.6)))

(test "-1.220023553697935e+00" (doco '(digamma 0.7)))

(test "2.282815446439123e+00" (doco '(digamma 10.3)))

(test "2.491335703197572e-01" (doco '(sine-integral 0.25)))
(test "9.460830703671830e-01" (doco '(sine-integral 1)))
(test "1.851809395144996e+00" (doco '(sine-integral 3.17)))
(test "1.549931244944674e+00" (doco '(sine-integral 5)))

(test "-8.246630625809456e-01" (doco '(cosine-integral 0.25)))
(test "3.374039229009682e-01" (doco '(cosine-integral 1)))
(test "6.466741792990671e-02" (doco '(cosine-integral 3.17)))
(test "-1.900297496566439e-01" (doco '(cosine-integral 5)))

(test "1.345817148172562e+01" (doco '(arithmetic-geometric-mean 24 6)))
(test "1.345817148172562e+01" (doco '(arithmetic-geometric-mean 6.0 24.0)))

(test "0" (doco '(number/type 13)))
(test "1" (doco '(number/type 13/5)))
(test "2" (doco '(number/type 13.5)))
(test "3" (doco '(number/type (cmplx 13.5 1.2))))
(test "4" (doco '(number/type 'foo)))

(test "13/1" (doco '(promote/rat 13)))
(test "13/3" (doco '(promote/rat 13/3)))
(test "1.330000000000000e+01" (doco '(promote/rat 13.3)))
(test "1.330000000000000e+01+1.440000000000000e+01i"
      (doco '(promote/rat (cmplx 13.3 14.4))))
(test "foo" (doco '(promote/rat 'foo)))

(test "1.300000000000000e+01" (doco '(promote/real 13)))
(test "4.333333333333333e+00" (doco '(promote/real 13/3)))
(test "1.330000000000000e+01" (doco '(promote/real 13.3)))
(test "1.330000000000000e+01+1.440000000000000e+01i"
      (doco '(promote/real (cmplx 13.3 14.4))))
(test "foo" (doco '(promote/real 'foo)))

;;; these should be complex numbers, but the printer shows them as real;
;;; so check both the printed representation and the type

(test "1.300000000000000e+01" (doco '(promote/cmplx 13)))
(test "3" (doco '(number/type (promote/cmplx 13))))
(test "4.333333333333333e+00" (doco '(promote/cmplx 13/3)))
(test "3" (doco '(number/type (promote/cmplx 13/3))))
(test "1.330000000000000e+01" (doco '(promote/cmplx 13.3)))
(test "3" (doco '(number/type (promote/cmplx 13.3))))

(test "1.330000000000000e+01+1.440000000000000e+01i"
      (doco '(promote/cmplx (cmplx 13.3 14.4))))
(test "foo" (doco '(promote/cmplx 'foo)))

(test "3" (doco '(min/i 3 5)))
(test "5" (doco '(max/i 3 5)))
(test "17/4" (doco '(min/q 17/3 17/4)))
(test "15/4" (doco '(min/q 15/4 17/4)))
(test "17/3" (doco '(max/q 17/3 17/4)))
(test "17/4" (doco '(max/q 15/4 17/4)))

(test "3.000000000000000e+00" (doco '(min/r 3.0 5.0)))
(test "5.000000000000000e+00" (doco '(max/r 3.0 5.0)))

(test "+Inf.0" (doco '(min)))
(test "3" (doco '(min 3)))
(test "17/3" (doco '(min 17/3)))
(test "1.350000000000000e+01" (doco '(min 13.5)))
(test "5.000000000000000e-01" (doco '(min 3 4.5 5/2 13 15.5 1/2)))
(test "-Inf.0" (doco '(max)))
(test "3" (doco '(max 3)))
(test "17/3" (doco '(max 17/3)))
(test "1.350000000000000e+01" (doco '(max 13.5)))
(test "1.550000000000000e+01" (doco '(max 3 4.5 5/2 13 15.5 1/2)))

(test "\"\"" (doco '(string-reverse "")))
(test "\"a\"" (doco '(string-reverse "a")))
(test "\"ba\"" (doco '(string-reverse "ab")))
(test "\"cba\"" (doco '(string-reverse "abc")))
(test "\"neelf\"" (doco '(string-reverse "fleen")))

(test "#u8(#x0 #x0 #x0 #x0 #x0)" (doco '(bytevector-create 5)))
(test "#u8(#x51 #x51 #x51 #x51 #x51)" (doco '(bytevector-create 5 #\Q)))

(test "#u8(#x0 #x0 #x0 #x0 #x0)" (doco '(make-bytevector 5)))
(test "#u8(#x51 #x51 #x51 #x51 #x51)" (doco '(make-bytevector 5 #\Q)))

(test "\"QQQQQ\"" (doco '(bytevector->string (make-bytevector 5 #\Q))))

(test "\"squicky\"" (doco '(let ((bv (bytevector-create 7)))
			     (bytevector-set! bv 0 #\s)
			     (bytevector-set! bv 1 #\q)
			     (bytevector-set! bv 2 #\u)
			     (bytevector-set! bv 3 #\i)
			     (bytevector-set! bv 4 #\c)
			     (bytevector-set! bv 5 #\k)
			     (bytevector-set! bv 6 #\y)
			     (bytevector->string bv))))

(test "(7 107)" (doco '(let ((bv (bytevector-create 7)))
			 (bytevector-set! bv 0 #\s)
			 (bytevector-set! bv 1 #\q)
			 (bytevector-set! bv 2 #\u)
			 (bytevector-set! bv 3 #\i)
			 (bytevector-set! bv 4 #\c)
			 (bytevector-set! bv 5 #\k)
			 (bytevector-set! bv 6 #\y)
			 (list (bytevector-length bv)
			       (bytevector-ref bv 5)))))

(test "\"kquicsy\"" (doco '(let ((bv (bytevector-create 7)))
			     (bytevector-set! bv 0 #\s)
			     (bytevector-set! bv 1 #\q)
			     (bytevector-set! bv 2 #\u)
			     (bytevector-set! bv 3 #\i)
			     (bytevector-set! bv 4 #\c)
			     (bytevector-set! bv 5 #\k)
			     (bytevector-set! bv 6 #\y)
			     (bytevector-swap! bv 0 5)
			     (bytevector->string bv))))

(test "#u8(#x61 #x62 #x63 #x64 #x65)" (doco '(bytevector #\a #\b #\c #\d #\e)))
(test "#u8()" (doco '(bytevector)))
(test "caught exception from bld-rtl-dir/wile-rtl2-000018.scm:23\n    list->bytevector got a bad value"
      (doco '(bytevector 311)))

(test "2" (doco '(string-find-first-char "breep" #\e)))
(test "#f" (doco '(string-find-first-char "breep" #\f)))
(test "3" (doco '(string-find-last-char "breep" #\e)))
(test "#f" (doco '(string-find-last-char "breep" #\f)))

; Jan 1 2000 = 2451545

(test "2451545" (doco '(julian-day 2000 1 1)))

(test "(2000 1 1)" (doco '(gregorian-date 2451545)))

(test "(2002 1 1)" (doco '(offset-date 2001 1 1 365)))

(test "1461" (doco '(delta-dates 2001 1 1 2005 1 1)))

;;; TODO: this is not hooked up yet
;;; (test "1" (doco '(day-of-week 2021 11 22)))

(test "(2021 4 4)" (doco '(gregorian-date (julian-day-of-easter 2021))))

(test "#t" (doco '(is-leap-year? 1600)))
(test "#f" (doco '(is-leap-year? 1601)))
(test "#f" (doco '(is-leap-year? 1602)))
(test "#f" (doco '(is-leap-year? 1603)))
(test "#t" (doco '(is-leap-year? 1604)))
(test "#f" (doco '(is-leap-year? 1700)))
(test "#t" (doco '(is-leap-year? 1704)))
(test "#f" (doco '(is-leap-year? 1800)))
(test "#t" (doco '(is-leap-year? 2000)))

(test "#t" (doco '(cfft-good-n? (* 2 2 3 5 5 7 8 9 11))))
(test "#f" (doco '(cfft-good-n? (* 2 2 3 5 5 7 8 9 17))))
(test "#f" (doco '(cfft-good-n? -5)))
(test "#t" (doco '(cfft-good-n? 6553600)))

(test "#u8(#x53 #x51 #x4c #x69 #x74 #x65 #x20 #x66 #x6f #x72 #x6d #x61 #x74 #x20 #x33 #x0)"
      (doco '(let ((port (open-file "cars.db" "rb"))) (read-bytes port 16))))

(test "#(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)"
      (doco '(let* ((v1 (list->vector (fromto 1 16)))
		    (v2 (vector-copy v1)))
	       (vector-fill! v1 #\O)
	       v2)))

(test "#(5 6 7 8 9 10 11 12 13 14 15 16)"
      (doco '(let* ((v1 (list->vector (fromto 1 16)))
		    (v2 (vector-copy v1 4)))
	       (vector-fill! v1 #\O)
	       v2)))

(test "caught exception from /home/uwe/github/wile/test-wile.scm:2878\n    'vector-copy' start index is out of range"
      (doco '(let* ((v1 (list->vector (fromto 1 16)))
		    (v2 (vector-copy v1 24)))
	       (vector-fill! v1 #\O)
	       v2)))

(test "#(5 6 7 8 9 10)"
      (doco '(let* ((v1 (list->vector (fromto 1 16)))
		    (v2 (vector-copy v1 4 10)))
	       (vector-fill! v1 #\O)
	       v2)))

(test "caught exception from /home/uwe/github/wile/test-wile.scm:2890\n    'vector-copy' end index is out of range"
      (doco '(let* ((v1 (list->vector (fromto 1 16)))
		    (v2 (vector-copy v1 4 3)))
	       (vector-fill! v1 #\O)
	       v2)))

(test "#u8(#xd #xd #xd #xd #xd)" (doco '(bytevector-fill! (bytevector-create 5) 13)))

(test "13" (doco '(let ((vec (bytevector-create 5)))
		    (bytevector-fill! vec 13)
		    (bytevector-ref vec 0))))

(test "#u8(#x1 #x2 #x3 #x4 #x5 #x6 #x7 #x8 #x9 #xa #xb #xc #xd #xe #xf #x10)"
      (doco '(let* ((v1 (bytevector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
		    (v2 (bytevector-copy v1)))
	       (bytevector-fill! v1 #\O)
	       v2)))

(test "#u8(#x5 #x6 #x7 #x8 #x9 #xa #xb #xc #xd #xe #xf #x10)"
      (doco '(let* ((v1 (bytevector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
		    (v2 (bytevector-copy v1 4)))
	       (bytevector-fill! v1 #\O)
	       v2)))

(test "caught exception from /home/uwe/github/wile/test-wile.scm:2914\n    'bytevector-copy' start index is out of range"
      (doco '(let* ((v1 (bytevector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
		    (v2 (bytevector-copy v1 24)))
	       (bytevector-fill! v1 #\O)
	       v2)))

(test "#u8(#x5 #x6 #x7 #x8 #x9 #xa)"
      (doco '(let* ((v1 (bytevector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
		    (v2 (bytevector-copy v1 4 10)))
	       (bytevector-fill! v1 #\O)
	       v2)))

(test "caught exception from /home/uwe/github/wile/test-wile.scm:2926\n    'bytevector-copy' end index is out of range"
      (doco '(let* ((v1 (bytevector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
		    (v2 (bytevector-copy v1 4 3)))
	       (bytevector-fill! v1 #\O)
	       v2)))

(test-report "wile compiler tests")

(if (test-expected 1767 0 12 0)
    (write-string "results are as expected\n")
    (write-string "results are unexpected!\n"))

(for-each remove-file
	  '("coyote" "coywolf" "coy.log" "coy-run.log" "woycolf"
	    "foobly.txt" "yow.dat" "wile-out.c" "wile-out.o"))
