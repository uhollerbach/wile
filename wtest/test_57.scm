(load-library "bigint.scm")

(bigint-set-base-bits! 17)

(let* ((fermat-11 (bigint-sum (bigint-expt (bigint-from-integer 2)
					   (bigint-from-integer (expt 2 11)))
			      (bigint-from-integer 1)))
       (f1 (bigint-from-integer 319489))
       (f2 (bigint-from-integer 974849))
       (f3 (bigint-from-string "167988556341760475137"))
       (f4 (bigint-from-string "3560841906445833920513"))
       (qr1 (bigint-quot-rem fermat-11 f1))
       (qr2 (bigint-quot-rem (car qr1) f2))
       (qr3 (bigint-quot-rem (car qr2) f3))
       (qr4 (bigint-quot-rem (car qr3) f4)))
  (when (bigint-zero? (cadr qr1))
    (write-string "f1 is a factor\n"))
  (when (bigint-zero? (cadr qr2))
    (write-string "f2 is a factor\n"))
  (when (bigint-zero? (cadr qr3))
    (write-string "f3 is a factor\n"))
  (when (bigint-zero? (cadr qr4))
    (write-string "f4 is a factor\n"))
  (write-string "TODO: test primality of (car qr4)\n"))

(let* ((big-1 (bigint-from-integer 1))
       (fermat-11 (bigint-sum (bigint-left-shift big-1 (expt 2 11)) big-1))
       (f1 (bigint-from-integer 319489))
       (f2 (bigint-from-integer 974849))
       (f3 (bigint-from-string "167988556341760475137"))
       (f4 (bigint-from-string "3560841906445833920513"))
       (qr1 (bigint-gcd fermat-11 f1))
       (qr2 (bigint-gcd fermat-11 f2))
       (qr3 (bigint-gcd fermat-11 f3))
       (qr4 (bigint-gcd fermat-11 f4)))
  (when (bigint>? qr1 big-1)
    (write-string "f1 is a factor\n"))
  (when (bigint>? qr2 big-1)
    (write-string "f2 is a factor\n"))
  (when (bigint>? qr3 big-1)
    (write-string "f3 is a factor\n"))
  (when (bigint>? qr4 big-1)
    (write-string "f4 is a factor\n"))
  (write-string (bigint-to-string fermat-11 16) "\n"))
