(define (make-account initial)
  (let ((ig1 (write-string "Welcome to the Lambda Bank!\n"))
	;;; new scope starts here
	(fns (let* ((balance initial)
		    (ntrans 0)
		    (chk (lambda () balance))
		    (dep (lambda (add)
			   (when (and (< ntrans 5)
				      (< add -50))
			     (printf "withdrawal %d exceeds limit\n" add)
			     (set! add -50))
			   (printf "%s %d\n"
				   (if (negative? add) "withdrawal" "deposit")
				   add)
			   (set! ntrans (+ ntrans 1))
			   (set! balance (+ balance add))
			   balance)))
	       (list chk dep))))
    ;;; new scope ends here
    (printf "Your initial balance is %d\n" initial)
    fns))

(let* ((acct1 (make-account 0))
       (check-1 (car acct1))
       (deposit-1 (cadr acct1))
       (acct2 (make-account 1000))
       (check-2 (car acct2))
       (deposit-2 (cadr acct2)))
  (printf "Bal 1 -- A:%d\tB:%d\n" (check-1) (check-2))
  (deposit-1 100)
  (deposit-2 -200)
  (printf "Bal 2 -- A:%d\tB:%d\n" (check-1) (check-2))
  (deposit-1 -100)
  (deposit-2 1200)
  (printf "Bal 3 -- A:%d\tB:%d\n" (check-1) (check-2))
  (deposit-1 200)
  (deposit-2 -400)
  (printf "Bal 3 -- A:%d\tB:%d\n" (check-1) (check-2))
  (deposit-2 400)
  (deposit-2 400)
  (deposit-2 400)
  (deposit-2 400)
  (deposit-2 400)
  (deposit-2 400)
  (deposit-2 -1000)
  (printf "Bal 4 -- A:%d\tB:%d\n" (check-1) (check-2)))
