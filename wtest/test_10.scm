(define (dn v)
  (display v)
  (newline))

(write-string "replicate\n")
(dn (replicate 'a -5))
(dn (replicate 'a 0))
(dn (replicate 'a 5))
(dn (replicate () 5))
(dn (replicate (list 'a 'b 'c) 5))

(let ((lst1 (list 3 1 4 1 5 9))
      (lst2 (list (list 3 'a)
		  (list 1 'b)
		  (list 4 'c)
		  (list 1 'd)
		  (list 5 'e)
		  (list 9 'f))))
  (write-string "memp\n")
  (dn (memp even? lst1))
  (dn (memp (lambda (x) (> x 4)) lst1))
  (dn (memp (lambda (x) (> x 12)) lst1))
  (write-string "memv\n")
  (dn (memv 4 lst1))
  (dn (memv 4 lst2))
  (write-string "assp\n")
  (dn (assp even? lst2))
  (dn (assp odd? lst2))
  (dn (assp zero? lst2))
  (write-string "assv\n")
  (dn (assv 4 lst2))
  (dn (assv 72 lst2))
  (write-string "list-drop-while\n")
  (dn (list-drop-while odd? lst1))
  (write-string "list-take-while\n")
  (dn (list-take-while odd? lst1)))

(dn (list-remove-dups (list 1 2 2 3 2 2 1 1 1 1 4 1 1 1 1 1)))

(dn (string-pad-left "foo" #\. 8))
(dn (string-pad-right "foo" #\. 8))
(dn (string-pad-center "foo" #\. 8))

(dn (string-pad-left "foo" #\. 9))
(dn (string-pad-right "foo" #\. 9))
(dn (string-pad-center "foo" #\. 9))

(let ((str "   foo   "))
  (dn (string-trim-left char-whitespace? str))
  (dn (string-trim-right char-whitespace? str))
  (dn (string-trim char-whitespace? str)))
