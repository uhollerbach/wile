(define (dn v)
  (display v)
  (newline))

(let ((v1 (list->vector (fromto 1 10)))
      (v2 (list->vector (fromto 1 10)))
      (v3 (list->vector (fromto 1 10)))
      (sq (lambda (v) (* v v)))
      (cu (lambda (v) (* v v v))))
  (write-string "nums\t")
  (dn v1)
  (write-string "squares\t")
  (dn (vector-map! sq v2))
  (write-string "cubes\t")
  (dn (vector-map! cu v3))
  (write-string "\nsum12\t")
  (dn (vector-map + v1 v2))
  (write-string "sum123\t")
  (dn (vector-map + v1 v2 v3))
  (write-string "\nsum12\n")
  (vector-for-each (lambda (a b) (dn (+ a b))) v1 v2)
  (write-string "\nsum123\n")
  (vector-for-each (lambda (a b c) (dn (+ a b c))) v1 v2 v3))

(let ((v1 (list->bytevector (fromto 1 10)))
      (v2 (list->bytevector (fromto 1 10)))
      (v3 (list->bytevector (fromto 1 10)))
      (sq (lambda (v) (* v v)))
      (cu (lambda (v) (remainder (* v v v) 128))))
  (write-string "nums\t")
  (dn v1)
  (write-string "squares\t")
  (dn (bytevector-map! sq v2))
  (write-string "cubes\t")
  (dn (bytevector-map! cu v3))
  (write-string "\nsum12\t")
  (dn (bytevector-map + v1 v2))
  (write-string "sum123\t")
  (dn (bytevector-map + v1 v2 v3))
  (write-string "\nsum12\n")
  (bytevector-for-each (lambda (a b) (dn (+ a b))) v1 v2)
  (write-string "\nsum123\n")
  (bytevector-for-each (lambda (a b c) (dn (+ a b c))) v1 v2 v3))
