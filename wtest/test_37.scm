(define (dn val)
  (display val)
  (newline))

(dn "generator")

(define jump-out #f)
(define yield-point #f)
(define callback #f)

(define (make-generator cb)
  (define (yield)
    (call/cc (lambda (cont)
               (set! yield-point cont)
               (jump-out #f)
               )))
  (define (resume)
    (call/cc (lambda (cont)
               (set! jump-out cont)
               (yield-point #f)
               )))
  (set! callback cb)
  (set! yield-point (lambda (ig)
		      (callback yield)
		      (jump-out #f)))
  resume)

(define (f yield)
  (dn 2)
  (yield)
  (dn 4)
  (yield)
  (dn 6))

(define (main ig)
  (dn 1)
  (define resume (make-generator f))
  (resume)
  (dn 3)
  (resume)
  (dn 5)
  (resume)
  (dn 7))

(main 42)

(exit 0)
