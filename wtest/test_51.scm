(define count 0)
(define fail 0)

(define (chek lst n lop nop)
  (let ((t1 (lop n lst))
	(t2 (nop (list-length lst) n)))
    (set! count (+ count 1))
    (if (eqv? t1 t2)
	(printf "test %d pass\n" count)
	(begin
	  (printf "test %d FAIL\n" count)
	  (set! fail (+ fail 1))))))

(do ((j 0 (+ j 1)))
    ((> j 8) #t)
  (do ((i 0 (+ i 1)))
      ((> i 8) #t)
    (chek (fromto 0 i) j list-length=? =)
    (chek (fromto 0 i) j list-length>=? >=)
    (chek (fromto 0 i) j list-length>? >)
    (chek (fromto 0 i) j list-length<=? <=)
    (chek (fromto 0 i) j list-length<? <))
  (chek () j list-length=? =)
  (chek () j list-length>=? >=)
  (chek () j list-length>? >)
  (chek () j list-length<=? <=)
  (chek () j list-length<? <))

(printf "%d failures\n" fail)
