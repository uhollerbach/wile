(load-library "bigint.scm")

(define (pollard-rho num n-iter)
  (let ((g (lambda (n)
	     (bigint-remainder
	      (bigint-sum bigint-const-1 (bigint-prod n n)) num))))
    (let loop ((x1 (bigint-from-integer 2))
	       (x2 (bigint-from-integer 2))
	       (d bigint-const-1)
	       (i n-iter))
      (cond ((zero? i)
	     #f)
	    ((zero? (bigint-compare d bigint-const-1))
	     (let* ((x1n (g x1))
		    (x2n (g (g x2)))
		    (dn (bigint-gcd (bigint-diff x1n x2n) num)))
	       (loop x1n x2n dn (i- i 1))))
	    ((zero? (bigint-compare d num))
	     #f)
	    (else d)))))

(let* ((num1 (bigint-from-string "12345678901234567891"))
       (num2 (bigint-from-string "1234577"))
       (num (bigint-prod num1 num2))
       (factor (pollard-rho num 1000000)))
  (if factor
      (write-string "pollard rho found " (bigint-to-string factor 16) "\n")
      (write-string "pollard rho failed!\n"))
  (cond ((not factor)
	 (write-string "factor is false!\n"))
	((bigint=? factor num1)
	 (write-string "factor is num1\n"))
	((bigint=? factor num2)
	 (write-string "factor is num2\n"))
	(else
	 (write-string "factor is something else!?\n"))))
