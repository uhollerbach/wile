;;; test 'apply': expect one of 15 (min), 34 (max), 91 (+), or 216750 (*)

(define (op1 a . as)
  (write-string "*: ")
  (let ((res a))
    (until (null? as)
	   (set! res (* res (car as)))
	   (set! as (cdr as)))
    res))

(define (op2 a . as)
  (write-string "+: ")
  (let ((res a))
    (until (null? as)
	   (set! res (+ res (car as)))
	   (set! as (cdr as)))
    res))

(define (op3 a . as)
  (write-string "max: ")
  (let ((res a))
    (until (null? as)
	   (set! res (max res (car as)))
	   (set! as (cdr as)))
    res))

(define (op4 a . as)
  (write-string "min: ")
  (let ((res a))
    (until (null? as)
	   (set! res (min res (car as)))
	   (set! as (cdr as)))
    res))

(let ((v1 15)
      (v2 25)
      (v3 17)
      (v4 34)
      (ops (list op1 op2 op3 op4))
      (op (remainder (epochtime) 4)))
  (display (apply (list-ref ops op) v1 v2 (list v3 v4)))
  (newline))
