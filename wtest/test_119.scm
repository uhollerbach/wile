;;; Invert Hilbert matrix. Caution! already crashes for 9th-order matrix

(define (make-hilbert n)
  (let ((mat (vector-create (i* n n)))
	(ix 0))
    (do ((j 1 (i+ j 1)))
	((> j n) #t)
      (do ((i 1 (i+ i 1)))
	  ((> i n) #t)
	(vector-set! mat ix (+ i j -1))
	(set! ix (i+ ix 1))))
    (vector-map! (lambda (v) (/ v)) mat)))

(write-string "rationals\n")
(let* ((n 14)
       (mat (make-hilbert n))
       (rhs (vector-create n))
       (lud (matrix-lu-decompose mat #f #t))
       (mati (vector-create (i* n n)))
       (ix 0))
  (do ((i 0 (i+ i 1)))
      ((>= i n) #t)
    (vector-set! rhs i 1)
    (let ((sol (matrix-lu-solve lud rhs)))
      (do ((j 0 (i+ j 1)))
	  ((>= j n) #t)
	(vector-set! mati ix (vector-ref sol j))
	(set! ix (i+ ix 1))))
    (vector-set! rhs i 0))
  (for-each (lambda (s) (display s) (newline)) (matrix-print mati n n #f))
  (newline)
  (let ((matmati (matrix-matrix-multiply mat n n #f mati n n #f #f)))
    (for-each (lambda (s) (display s) (newline)) (matrix-print matmati n n #f))))

(write-string "\nreals\n")
(let* ((n 7)
       (mat (make-hilbert n))
       (rhs (vector-create n))
       (lud (matrix-lu-decompose mat #f))
       (mati (vector-create (i* n n)))
       (ix 0))
  (do ((i 0 (i+ i 1)))
      ((>= i n) #t)
    (vector-set! rhs i 1)
    (let ((sol (matrix-lu-solve lud rhs)))
      (do ((j 0 (i+ j 1)))
	  ((>= j n) #t)
	(vector-set! mati ix (vector-ref sol j))
	(set! ix (i+ ix 1))))
    (vector-set! rhs i 0))
  (let ((matmati (matrix-matrix-multiply mat n n #f mati n n #f #f)))
    (vector-map! (lambda (v) (if (< (abs v) 1.0e-17) 0 v)) matmati)
    (vector-map! (lambda (v) (if (< (abs (- v 1.0)) 1.0e-17) 1 v)) matmati)
    (for-each (lambda (s) (display s) (newline)) (matrix-print matmati n n #f))))
